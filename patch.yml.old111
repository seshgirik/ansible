---
- hosts: localhost
  gather_facts: no


#ansible-playbook -f 15 ~/ansible/patch.yml --extra-vars "patch=/tmp/sdc.pcap.tgz name=JIRA1425"

  vars:
    my_patch: "{{ patch }}"

  tasks:
    - name: new variable with current date time
      gather_facts: False
      set_fact: date="{{lookup('pipe','date \"+%Y%m%d%H%M\"')}}"
      tags:
        - checks
        - start
        - stop



    - name: Ansible check file exists example.
      stat:
       path: "/root/{{ my_patch }}"
      register: file_details

    - debug:
       msg: "Path exists and is a directory"
      when: file_details.stat.isdir is defined and file_details.stat.isdir


    - name: stats check file exists example.
      debug:
       var=file_details


    - name: finding binary files
      find:
        paths: "/root/{{ my_patch }}"
        #recurse: yes
      register: findbinaries

    - name: binary files
      debug:
       var=findbinaries
#

- hosts: sc1
  gather_facts: no
  vars:
    my_patch: "{{ patch }}"
    patch_name: "{{ name }}"
    timestamp: "{{ hostvars['localhost']['date'] }}"
    binaries: "{{ hostvars['localhost']['findbinaries'] }}"
    file_info: "{{ hostvars['localhost']['file_details'] }}"
    #dest_path: "/usr/IMS/current/bin"
    #dest_path: "/usr/IMS/current/bin"
    #dest_path: "/usr/IMS/current/bin/{{ timestamp }}"
    dest_path: "/usr/IMS/current/bin/{{ name | default('patch') }}_{{ timestamp }}"
    cap_file: "{{ hostvars[inventory_hostname].node_name }}_{{ timestamp }}.pcap"
    log_file: "{{ hostvars[inventory_hostname].node_name }}_{{ timestamp }}.log"
    total: 0
    peers_sum: []
    tags:
      - checks

  tasks:

    - name: Creates directory
      file:
        path: "{{ dest_path }}"
        state: directory
        recurse: yes


#    - name: copying files to remote directory
#      copy:
#        src: "{{ item.path }}"
#        dest: "{{ dest_path }}"
#      ignore_errors: true
#      when: file_info.stat.isdir is defined and file_info.stat.isdir
#      with_items: "{{ binaries.files }}"
#
    - name: copying file
      copy:
        #src: "/root/{{ my_patch }}"
        src: "{{ patch }}"
        dest: "{{ dest_path }}"
      ignore_errors: true
#      when: "'skipped' in binaries.msg"

    - name: untar tgz files  and delete tgz files
      #shell: "find . -type f | cut -d: -f1 |xargs -I % readlink -f %|sed 's#.*bin/##'|xargs -t -I % ln -sf % /usr/IMS/current/bin"
      shell: "for file in *.tgz; do tar -zxvf $file; done && rm -rf *.tgz"
      #ignore_errors: true
      args:
       chdir: "{{ dest_path }}"


    - name: create softlinks in bin path for files
      shell: "find . -type f | cut -d: -f1 |xargs -I % readlink -f %|sed 's#.*bin/##'|xargs -t -I % ln -sf % /usr/IMS/current/bin"
      #ignore_errors: true
      args:
       chdir: "{{ dest_path }}"

    - name: chking md5sum
      #shell: "find . -type f | cut -d: -f1 |xargs -I % readlink -f %|sed 's#.*bin/##'|xargs -t -I % ln -sf % /usr/IMS/current/bin"
      shell: "md5sum *"
      #ignore_errors: true
      args:
       chdir: "{{ dest_path }}"


    - name: md5sum check file exists example.
      stat:
       path: "{{ dest_path }}/"
      register: remotefile_details

    - debug:
       var=remotefile_details


    - stat: path= "{{ dest_path }}" get_md5=yes

    - name: finding binary files
      find:
        paths: "{{ dest_path }}"
        #recurse: yes
      register: remotefiles

#    - name: md5sum files in remote directory
#      ignore_errors: true
#      shell: "md5sum {{ item.path }} "
#      debug: var=item.path
#      with_items: "{{ remotefiles.files }}"
#
#


