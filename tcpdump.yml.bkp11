---
- hosts: localhost
  gather_facts: no

  vars:
    iplist:
      - 10.10.233.139
      - 10.10.233.160
      - 10.10.233.164
      - 110.10.233.164
      - 210.10.233.164
  connection: local





  tasks:
    - name: new variable with current date time
      gather_facts: False
      set_fact: date="{{lookup('pipe','date \"+%Y%m%d%H%M\"')}}"
#    - name: print variable
#      debug: msg="Current date and time is {{date}}"
#

- hosts: all
  gather_facts: no
  #strategy: free
#- hosts: localhost 

  vars:
      timestamp: "{{ hostvars['localhost']['date'] }}"

      cap_file: "{{ hostvars[inventory_hostname].node_name }}_{{ timestamp }}.pcap"
      log_file: "{{ hostvars[inventory_hostname].node_name }}_{{ timestamp }}.log"
      dest_folder: /root/
      local_folder: /root/LOG_PCAP/
      iplist:
      - 10.10.233.139
      - 10.10.233.160
      - 10.10.233.164
 
  tasks:
#
#    - debug: var=cap_file
#      gather_facts: False
#
#    - debug: var=timestamp
#      gather_facts: False
#
#    - debug: msg="Current date and time is {{ timestamp }}"
#    - debug: msg="Current logfile name is  {{ log_file }}"
#
#    - debug: 
#      msg: "timestamp is '{{ timestamp }}'"
# 
#
#
#
    - name: "peers on sc"
      #shell: "netstat -anp|egrep \"8082|3030 \""
      shell: "netstat -anp|grep emx| awk '{print $5;}'|sed -e 's/:.*//'|sort|uniq|grep -v 0.0|grep -v DGRAM|wc -l"
      #shell: "ping -c 2 -W 10 10.10.233.139 -I fpeth2"
      run_once: yes
      register: peers_sc
      failed_when: >
        (peers_sc.stdout|int > 0) and (peers_sc.stdout|int < 8)
      #ignore_errors: yes
      delegate_to: "{{ item }}"
      with_items: "{{ groups.scs }}"
      tags:
        - checks

    - name: print peers_sc
      #debug: var=item.stdout | regex_search('Unreachable')
      #debug: var=item.stdout
      debug:
        #msg: "{{ item.stdout.split('\n') }}"
        var=item.stdout

      #debug: var=item.failed
      #when: item.stdout is search("Unreachable")
      run_once: yes
      delegate_to: localhost
      with_items: "{{ peers_sc.results }}"
      tags:
        - checks



#
    - name: "peers on mp"
      #shell: "netstat -anp|egrep \"8082|3030 \""
      shell: "netstat -anp|grep emx| awk '{print $5;}'|sed -e 's/:.*//'|sort|uniq|grep -v 0.0|grep -v DGRAM|wc -l"
      #shell: "ping -c 2 -W 10 10.10.233.139 -I fpeth2"
      run_once: yes
      register: peers_mp
      failed_when: >
        (peers_mp.stdout|int > 0) and (peers_mp.stdout|int < 3)
      #ignore_errors: yes
      delegate_to: "{{ item }}"
      with_items: "{{ groups.mps }}"
      tags:
        - checks

    - name: print peers_mp
      #debug: var=item.stdout | regex_search('Unreachable')
      #debug: var=item.stdout
      debug:
        #msg: "{{ item.stdout.split('\n') }}"
        var=item.stdout
      tags:
        - checks

      #debug: var=item.failed
      #when: item.stdout is search("Unreachable")
      run_once: yes
      delegate_to: localhost
      with_items: "{{ peers_mp.results }}"
      tags:
        - checks





    - name: "Checking if ports 8082/3030 listening on gtre1/gtre2"
      shell: "netstat -anp|egrep \"8082|3030 \""
      #shell: "ping -c 2 -W 10 10.10.233.139 -I fpeth2"
      run_once: yes
      register: netstat_res
      ignore_errors: yes
      delegate_to: "{{ item }}"
      with_items: "{{ groups.gtres }}"
      tags:
        - checks

    - name: print netstat_res
      #debug: var=item.stdout | regex_search('Unreachable')
      #debug: var=item.stdout
      debug:
        msg: "{{ item.stdout.split('\n') }}"
      tags:
        - checks

      #debug: var=item.failed
      #when: item.stdout is search("Unreachable")
      run_once: yes
      delegate_to: localhost
      with_items: "{{ netstat_res.results }}"
      tags:
        - checks


    - name: "Checking if ports 506 listening on sipre1/sipre2"
      shell: "netstat -anp|egrep \":506\""
      #shell: "ping -c 2 -W 10 10.10.233.139 -I fpeth2"
      run_once: yes
      register: netstat_res
      ignore_errors: yes
      delegate_to: "{{ item }}"
      with_items: "{{ groups.sipres }}"
      tags:
        - checks

    - name: print netstat_res
      #debug: var=item.stdout | regex_search('Unreachable')
      #debug: var=item.stdout
      debug:
        msg: "{{ item.stdout.split('\n') }}"
      tags:
        - checks

      #debug: var=item.failed
      #when: item.stdout is search("Unreachable")
      run_once: yes
      delegate_to: localhost
      with_items: "{{ netstat_res.results }}"
      tags:
        - checks





      #debug: var=ping_cscf_res.results.failed
      #debug: var=ping_cscf_res.results.failed
      #debug: var=ping_cscf_res.results
      #debug: var=ping_cscf_res.results.stdout
      #debug: var=ping.packets_tx
      #with_items: "{{ find_cores.results }}"

    - name: "Checking if cscf is pingable"
      shell: "ping -c 2 -W 10 {{ item }} -I fpeth2"
      #shell: "ping -c 2 -W 10 10.10.233.139 -I fpeth2"
      run_once: yes
      register: ping_cscf_res
      failed_when: "'Unreachable' in ping_cscf_res.stdout"
      #ignore_errors: yes
      delegate_to: fe
      with_items: "{{ iplist }}"
      tags:
        - checks

    - name: print pingstatus
      #debug: var=item.stdout | regex_search('Unreachable')
      debug:
        msg: "{{ item.stdout.split('\n') }}"
      #debug: var=item.failed
      run_once: yes
      delegate_to: localhost
      when: item.stdout is search("Unreachable")
      with_items: "{{ ping_cscf_res.results }}"
      #debug: var=ping_cscf_res.results.failed
      #debug: var=ping_cscf_res.results.failed
      #debug: var=ping_cscf_res.results
      #debug: var=ping_cscf_res.results.stdout
      #debug: var=ping.packets_tx
      #with_items: "{{ find_cores.results }}"
      tags:
        - checks


    - name: start log capture
      gather_facts: False
      shell: "source /usr/IMS/exports/blade.cfg ; /usr/IMS/current/bin/mlogc -c 127.0.0.1 > /{{ dest_folder}}/{{ log_file }} &"
      async: 1200
      poll: 0
      ignore_errors: true
 
    - name: start tcpdump
      gather_facts: False
      shell: nohup timeout 1800 tcpdump -i any -s 0 -w /{{ dest_folder}}/{{ cap_file }} &
      ignore_errors: true
 


    - pause:
        prompt: "Do you want to stop log/pcap (yes/no)?"
      register: my_pause
      #delegate_to: localhost
      #
      #
- hosts: all
  gather_facts: no
  strategy: free

  vars:
      timestamp: "{{ hostvars['localhost']['date'] }}"

      cap_file: "{{ hostvars[inventory_hostname].node_name }}_{{ timestamp }}.pcap"
      log_file: "{{ hostvars[inventory_hostname].node_name }}_{{ timestamp }}.log"
      dest_folder: /root/
      local_folder: /root/LOG_PCAP/

  tasks:

#    - debug: var=cap_file
#      gather_facts: False
#
#    - debug: var=timestamp
#      gather_facts: False
#
#    - debug: msg="Current date and time is {{ timestamp }}"
#    - debug: msg="Current logfile name is  {{ log_file }}"
#
#    - debug: 
#      msg: "timestamp is '{{ timestamp }}'"
 
    - name: stop tcpdump
      gather_facts: False
      shell: |
        killall tcpdump 
        killall -9 mlogc

      #shell: killall tcpdump 
      #shell: killall -9 mlogc
      ignore_errors: true
 
      #shell: sshpass -p 'mavenir' ssh $ip "tcpdump -i any -s 0 -w /root/${file_prifix}_$Date.pcap </dev/null >& /dev/null &"
      #shell: sshpass -p 'mavenir' ssh $ip "source /usr/IMS/exports/blade.cfg ; /usr/IMS/current/bin/mlogc -c 127.0.0.1 > /root/${file_prifix}_$Date.log &"
      #
      #
      #
      #
    - name: Wait for system to become reachable over SSH
      wait_for_connection:
       connect_timeout: 20
       timeout: 60
    - name: compress capture file
      command: |
        gzip {{cap_file}} chdir={{ dest_folder}}/
        gzip {{log_file}} chdir={{ dest_folder}}/
        chmod 755 {{ dest_folder}}/{{cap_file}}.gz
        chmod 755 {{ dest_folder}}/{{log_file}}.gz
      ignore_errors: true

    - name: copy logs to /export/tmp/ansible/
      fetch: |
        src={{ dest_folder}}/{{cap_file}}.gz dest={{ local_folder}} flat=yes
        src={{ dest_folder}}/{{log_file}}.gz dest={{ local_folder}} flat=yes
      ignore_errors: true







    - name: copy logs to /export/tmp/ansible/
      fetch: src={{ dest_folder}}/{{cap_file}}.gz dest={{ local_folder}} flat=yes

- hosts: all
  gather_facts: no
  strategy: free

  vars:
      timestamp: "{{ hostvars['localhost']['date'] }}"

      cap_file: "{{ hostvars[inventory_hostname].node_name }}_{{ timestamp }}.pcap"
      log_file: "{{ hostvars[inventory_hostname].node_name }}_{{ timestamp }}.log"
      dest_folder: /root/
      local_folder: /root/LOG_PCAP/

  tasks:
    - name: finding core files
      find:
        paths: /data/storage/corefiles
        #recurse: yes
      register: find_cores

    - name: print find_cores
      debug: var=item.path
      with_items: "{{ find_cores.files }}"


