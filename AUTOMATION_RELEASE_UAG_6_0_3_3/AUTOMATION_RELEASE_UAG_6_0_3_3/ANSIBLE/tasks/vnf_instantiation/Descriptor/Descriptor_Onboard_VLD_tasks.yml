---

    - debug:
        var: XML_PATH

    - name: Read VLD_Id attribute from XML
      xml:
         xmlstring: "{{lookup('file', '{{ XML_PATH }}') | regex_replace('xmlns=.*>', '>')}}"
         xpath: "{{ DESCRIPTOR_ONBOARD_CON_INFO.VLD_Id }}"
         content: text
      register: xmlIDresp
      delegate_to: localhost

    - debug:
        var: xmlIDresp.matches[0]["vl-id"]

    - name: Read NSD_Version attribute from XML
      xml:
         xmlstring: "{{lookup('file', '{{ XML_PATH }}') | regex_replace('xmlns=.*>', '>')}}"
         xpath: "{{ DESCRIPTOR_ONBOARD_CON_INFO.VLD_Version }}"
         content: text
      register: xmlVERresp
      delegate_to: localhost

    - debug:
        var: xmlVERresp.matches[0]["descriptor-version"]

    - include_tasks: ../query_db.yml QUERY="select id from vld_descriptor where vld_id='{{xmlIDresp.matches[0]["vl-id"]}}' and version='{{xmlVERresp.matches[0]["descriptor-version"]}}'"
      when: (xmlIDresp.matches[0]["vl-id"] is defined)  and  (xmlVERresp.matches[0]["descriptor-version"] is defined)
    - set_fact: VLD_DB_Id={{RESP.stdout_lines.0}}
      when: RESP.stdout_lines.0 is defined

    - include_tasks: ../query_db.yml QUERY="select name from vld_descriptor where id='{{VLD_DB_Id}}'"
      when: VLD_DB_Id is defined
    - set_fact: VLD_Name={{RESP.stdout_lines.0}}
      when: RESP.stdout_lines.0 is defined


    - include_tasks: ../query_db.yml QUERY="select fk_nsd_descriptor from vld_descriptor where id='{{VLD_DB_Id}}'"
      when: VLD_DB_Id is defined
    - set_fact: VLD_NSD_DB_Id={{RESP.stdout_lines.0}}
      when: RESP.stdout_lines.0 is defined

    - include_tasks: ../query_db.yml QUERY="select nsd_id from nsd_descriptor where id='{{VLD_NSD_DB_Id}}'"
      when: VLD_NSD_DB_Id is defined
    - set_fact: VLD_NSD_Id={{RESP.stdout_lines.0}}
      when: RESP.stdout_lines.0 is defined

    - include_tasks: ../query_db.yml QUERY="select name from nsd_descriptor where id='{{VLD_NSD_DB_Id}}'"
      when: VLD_NSD_DB_Id is defined
    - set_fact: VLD_NSD_Name={{RESP.stdout_lines.0}}
      when: RESP.stdout_lines.0 is defined

    - include_tasks: ../query_db.yml QUERY="select version from nsd_descriptor where id='{{VLD_NSD_DB_Id}}'"
      when: VLD_NSD_DB_Id is defined
    - set_fact: VLD_NSD_Version={{RESP.stdout_lines.0}}
      when: RESP.stdout_lines.0 is defined

    - include_tasks: ../query_db.yml QUERY="select status from nsd_descriptor_status where id='{{VLD_NSD_DB_Id}}'"
      when: VLD_NSD_DB_Id is defined
    - set_fact: VLD_NSD_Id_Status={{RESP.stdout_lines.0}}
      when: RESP.stdout_lines.0 is defined


    - include_tasks: ../https_request_no_template.yml
                        URL="{{DESCRIPTOR_ONBOARD_URL}}"
                        METHOD="POST"
                        PAYLOAD="rowData={\"fkNsdDescriptor\":{\"descriptorId\":\"{{VLD_NSD_Id}}\",\"namespace\":\"urn:mitel:params:xml:ns:yang:nsd\",\"name\":\"{{VLD_NSD_Name}}\",\"id\":\"{{VLD_NSD_DB_Id}}\",\"type\":\"NSD\",\"parentDescriptorId\":\"\",\"status\":\"{{VLD_NSD_Id_Status}}\"},\"type\":\"VLD\",\"descriptorId\":\"{{xmlIDresp.matches[0]['vl-id']}}\",\"namespace\":\"urn:mitel:params:xml:ns:yang:vld\",\"name\":\"{{VLD_Name}}\",\"id\":\"{{VLD_DB_Id}}\",\"parentDescriptorId\":\"{{VLD_NSD_Id}}\",\"tenant\":\"{{Tenant_Name}}\",\"status\":\"SAVED\"}"
      when: (VLD_NSD_Id) and (VLD_NSD_Name) and (VLD_NSD_DB_Id) and (VLD_NSD_Id_Status) and (xmlIDresp.matches[0]["vl-id"]) and (VLD_Name) and (VLD_DB_Id)



#    - include_tasks: ../tasks/query_db.yml QUERY="select status from vld_descriptor_status where fk_vld_descriptor='{{VLD_DB_Id}}'"
#      when: VLD_DB_Id is defined
#    - set_fact: VLDStatus={{RESP.stdout_lines.0}}
#      when: RESP.stdout_lines.0 is defined

    - command: "mysql -u{{ MYSQL_USER }} -p{{ MYSQL_PASSWD }} {{ MYSQL_DB }} -sN -e \"select status from vld_descriptor_status where fk_vld_descriptor='{{VLD_DB_Id}}'\" "
      register: STATUS_RESP
      remote_user: "{{CMS_IP_SYSUSER}}"
      retries: "{{DESCRIPTOR_RETRIES}}"
      delay: "{{ DELAY }}"
      until: (not VLD_DB_Id) or ( ( STATUS_RESP.stdout_lines.0|lower in "Onboarded"|lower ) or ( STATUS_RESP.stdout_lines.0|lower in "InUse"|lower ) or ( STATUS_RESP.stdout_lines.0|lower in "Failed"|lower ) )
      ignore_errors: yes

    - name: fail the play if the previous command did not succeed
      fail:
        msg:
        - ""
        - ""
        - "################################################################"
        - "################################################################"
        - "###                                                          ###"
        - "###                                                          ###"
        - "###                                                          ###"
        - "###                  VLD STATUS: {{STATUS_RESP.stdout_lines.0.rjust(10)}}                  ###"
        - "###     Somthing went wrong, Please check the logs or DB     ###"
        - "###                                                          ###"
        - "###                                                          ###"
        - "###                                                          ###"
        - "################################################################"
        - "################################################################"
        - ""
        - ""
      when: not ( ( STATUS_RESP.stdout_lines.0|lower in "Onboarded"|lower ) or ( STATUS_RESP.stdout_lines.0|lower in "InUse"|lower ) or ( STATUS_RESP.stdout_lines.0|lower in "Failed"|lower ) )

    # - pause:
    #     seconds: "{{DESCRIPTOR_ONBOARD_WAIT_TIME}}"
    #
    # - include_tasks: ../query_db.yml QUERY="select status from vld_descriptor_status where fk_vld_descriptor='{{VLD_DB_Id}}'"
    #   retries: "{{ DESCRIPTOR_RETRIES }}"
    #   delay: "{{ DELAY }}"
    #   until: ( RESP.stdout_lines.0|lower == "Onboarded"|lower ) or ( RESP.stdout_lines.0|lower == "Failed"|lower )
    #
    # - name: fail the play if the previous command did not succeed
    #   fail: msg="VLD is in {{RESP.stdout_lines.0}} state... Somthing went wrong, Please check the logs or DB"
    #   when: (RESP.stdout_lines.0 is defined) and not ( ( RESP.stdout_lines.0|lower in "Onboarded"|lower ) or ( RESP.stdout_lines.0|lower in "InUse"|lower ) or ( RESP.stdout_lines.0|lower in "Failed"|lower ) )
