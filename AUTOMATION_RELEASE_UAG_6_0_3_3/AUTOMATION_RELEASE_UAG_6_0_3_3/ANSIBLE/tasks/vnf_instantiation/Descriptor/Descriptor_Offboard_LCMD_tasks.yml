---

    - set_fact:
        XML_MODDED_STR: "{{lookup('file', '{{ XML_PATH }}')}}"

    - set_fact:
        XML_MODDED_STR: "{{XML_MODDED_STR[0:150] | regex_replace('xmlns=.*>', '>')}}{{XML_MODDED_STR[150:]}}"

    - name: Read LCMD_Id attribute from XML
      xml:
         xmlstring: "{{XML_MODDED_STR}}"
         xpath: "{{ DESCRIPTOR_ONBOARD_CON_INFO.LCMD_Metadata_Id }}"
         content: text
      register: xmlIDresp
      delegate_to: localhost

    - debug:
        var: "{{xmlIDresp.matches[0]['metadata-id']}}"

    - include_tasks: ../query_db.yml
      vars:
         QUERY: "select name from lcmd_descriptor where lcmd_id='{{xmlIDresp.matches[0][\"metadata-id\"]}}'"
      when: xmlIDresp.matches[0]["metadata-id"] is defined
    - set_fact: LCMD_Metadata_Name={{RESP.stdout_lines.0}}
      when: RESP.stdout_lines.0 is defined

    - include_tasks: ../query_db.yml
      vars:
         QUERY: "select id from lcmd_descriptor where lcmd_id='{{xmlIDresp.matches[0][\"metadata-id\"]}}'"
      when: xmlIDresp.matches[0]["metadata-id"] is defined
    - set_fact: LCMD_DB_Id={{RESP.stdout_lines.0}}
      when: RESP.stdout_lines.0 is defined

    - include_tasks: ../query_db.yml
      vars:
         QUERY: "select status from lcmd_descriptor_status where id='{{LCMD_DB_Id}}'"
      when: LCMD_DB_Id is defined
    - set_fact: LCMD_Metadata_Status={{RESP.stdout_lines.0}}
      when: RESP.stdout_lines.0 is defined


    - include_tasks: ../query_db.yml
      vars:
         QUERY: "select fk_vnfd_descriptor from lcmd_descriptor where id='{{LCMD_DB_Id}}'"
      when: LCMD_DB_Id is defined
    - set_fact: LCMD_VNFD_DB_Id={{RESP.stdout_lines.0}}
      when: RESP.stdout_lines.0 is defined

    - include_tasks: ../query_db.yml
      vars:
         QUERY: "select vnfd_id from vnfd_descriptor where id='{{LCMD_VNFD_DB_Id}}'"
      when: LCMD_VNFD_DB_Id is defined
    - set_fact: LCMD_VNFD_Id={{RESP.stdout_lines.0}}
      when: RESP.stdout_lines.0 is defined

    - include_tasks: ../query_db.yml
      vars:
         QUERY: "select name from vnfd_descriptor where id='{{LCMD_VNFD_DB_Id}}'"
      when: LCMD_VNFD_DB_Id is defined
    - set_fact: LCMD_VNFD_Name={{RESP.stdout_lines.0}}
      when: RESP.stdout_lines.0 is defined

    - include_tasks: ../query_db.yml
      vars:
         QUERY: "select version from vnfd_descriptor where id='{{LCMD_VNFD_DB_Id}}'"
      when: LCMD_VNFD_DB_Id is defined
    - set_fact: LCMD_VNFD_Version={{RESP.stdout_lines.0}}
      when: RESP.stdout_lines.0 is defined

    - include_tasks: ../query_db.yml
      vars:
         QUERY: "select status from vnfd_descriptor_status where id='{{LCMD_VNFD_DB_Id}}'"
      when: LCMD_VNFD_DB_Id is defined
    - set_fact: LCMD_VNFD_Id_Status={{RESP.stdout_lines.0}}
      when: RESP.stdout_lines.0 is defined


    - include_tasks: ../query_db.yml
      vars:
         QUERY: "select fk_nsd_descriptor from vnfd_descriptor where id='{{LCMD_VNFD_DB_Id}}'"
      when: LCMD_VNFD_DB_Id is defined
    - set_fact: LCMD_NSD_DB_Id={{RESP.stdout_lines.0}}
      when: RESP.stdout_lines.0 is defined

    - include_tasks: ../query_db.yml
      vars:
         QUERY: "select nsd_id from nsd_descriptor where id='{{LCMD_NSD_DB_Id}}'"
      when: LCMD_NSD_DB_Id is defined
    - set_fact: LCMD_NSD_Id={{RESP.stdout_lines.0}}
      when: RESP.stdout_lines.0 is defined

    - include_tasks: ../query_db.yml
      vars:
         QUERY: "select name from nsd_descriptor where id='{{LCMD_NSD_DB_Id}}'"
      when: LCMD_NSD_DB_Id is defined
    - set_fact: LCMD_NSD_Name={{RESP.stdout_lines.0}}
      when: RESP.stdout_lines.0 is defined

    - include_tasks: ../query_db.yml
      vars:
         QUERY: "select version from nsd_descriptor where id='{{LCMD_NSD_DB_Id}}'"
      when: LCMD_NSD_DB_Id is defined
    - set_fact: LCMD_NSD_Version={{RESP.stdout_lines.0}}
      when: RESP.stdout_lines.0 is defined

    - include_tasks: ../query_db.yml
      vars:
         QUERY: "select status from nsd_descriptor_status where id='{{LCMD_NSD_DB_Id}}'"
      when: LCMD_NSD_DB_Id is defined
    - set_fact: LCMD_NSD_Id_Status={{RESP.stdout_lines.0}}
      when: RESP.stdout_lines.0 is defined

    - shell: "curl -s -k -X \"DELETE\" --cookie '{{login_response.set_cookie}}' {{DESCRIPTOR_OFFBOARD_URL}}/LCMD/{{LCMD_DB_Id}}"
      delegate_to: localhost
      register: curl_resp

    - debug: msg="{{curl_resp}}"

    - command: "mysql -u{{ MYSQL_USER }} -p{{ MYSQL_PASSWD }} {{ MYSQL_DB }} -sN -e \"select status from lcmd_descriptor_status where fk_lcmd_descriptor='{{LCMD_DB_Id}}'\" "
      register: STATUS_RESP
      remote_user: "{{CMS_IP_SYSUSER}}"
      retries: "{{DESCRIPTOR_RETRIES}}"
      delay: "{{ DELAY }}"
      until: ( not LCMD_DB_Id ) or ( STATUS_RESP.stdout_lines.0|lower in "Deleted"|lower ) or ( STATUS_RESP.stdout_lines.0|lower in "Failed"|lower ) or ( STATUS_RESP.stdout_lines.0|lower in "Saved"|lower )
      ignore_errors: yes

    - name: fail the play if the previous command did not succeed
      fail:
        msg:
        - ""
        - ""
        - "################################################################"
        - "################################################################"
        - "###                                                          ###"
        - "###                                                          ###"
        - "###                                                          ###"
        - "###                  LCMD STATUS: {{STATUS_RESP.stdout_lines.0.rjust(10)}}                 ###"
        - "###     Somthing went wrong, Please check the logs or DB     ###"
        - "###                                                          ###"
        - "###                                                          ###"
        - "###                                                          ###"
        - "################################################################"
        - "################################################################"
        - ""
        - ""
      when: not ( ( STATUS_RESP.stdout_lines.0|lower in "Deleted"|lower ) or ( STATUS_RESP.stdout_lines.0|lower in "Failed"|lower ) or ( STATUS_RESP.stdout_lines.0|lower in "Saved"|lower ) )
#    - include_tasks: ../https_request.yml
#                        URL="{{DESCRIPTOR_OFFBOARD_URL}}/LCMD/{{LCMD_DB_Id}}"
#                        METHOD="DELETE"
#                        PAYLOAD="rowData={"descriptorId":"'{{xmlIDresp.matches[0]["metadata-id"]}}'","namespace":"urn:mitel:params:xml:vnf:yang:vdu","name":"'{{LCMD_Metadata_Name}}'","id":'{{LCMD_DB_Id}}',"fkVnfdDescriptor":{"fkNsdDescriptor":{"descriptorId":'{{LCMD_NSD_Id}}',"namespace":"'"urn:mitel:params:xml:vnf:yang:nsd"'","name":"'{{LCMD_NSD_Name}}'","id":"'{{LCMD_NSD_DB_Id}}'","type":"NSD","version":"'{{LCMD_NSD_Version}}'","parentDescriptorId":"","tenant":"'{{Tenant_Name}}'","status":"'{{LCMD_NSD_Id_Status}}'"},"type":"VNFD","version":"'{{LCMD_VNFD_Version}}'","descriptorId":"'{{LCMD_VNFD_Id}}'","namespace":"urn:mitel:params:xml:vnf:yang:vnfd","name":"'{{LCMD_VNFD_Name}}'","id":"'{{LCMD_VNFD_DB_Id}}'","parentDescriptorId":"'{{LCMD_NSD_Id}}'","tenant":"'{{Tenant_Name}}'","status":"'{{LCMD_VNFD_Id_Status}}'"},"type":"LCMD","parentDescriptorId":"'{{LCMD_VNFD_Id}}'","status":"'{{LCMD_Metadata_Status}}'"}"
#      when: (xmlIDresp.matches[0]["metadata-id"]) and (LCMD_Metadata_Name) and (LCMD_DB_Id) and (LCMD_NSD_Id) and (LCMD_NSD_Name) and (LCMD_NSD_DB_Id) and (LCMD_NSD_Version) and (LCMD_NSD_Id_Status) and (LCMD_VNFD_Version) and (LCMD_VNFD_Id) and (LCMD_VNFD_Name) and (LCMD_VNFD_DB_Id) and (LCMD_VNFD_Id_Status) and (LCMD_Metadata_Status)



    # - include_tasks: ../query_db.yml
    #   vars:
    #      QUERY: "select status from lcmd_descriptor_status where fk_lcmd_descriptor='{{LCMD_DB_Id}}'"
    #   when: LCMD_DB_Id is defined
    # - set_fact: LCMDStatus={{RESP.stdout_lines.0}}
    #   when: RESP.stdout_lines.0 is defined
    #
    #
    # - include_tasks: ../query_db.yml
    #   vars:
    #      QUERY: "select status from lcmd_descriptor_status where fk_lcmd_descriptor='{{LCMD_DB_Id}}'"
    #   when: LCMD_DB_Id is defined
    # - set_fact: LCMDStatus={{RESP.stdout_lines.0}}
    #   when: RESP.stdout_lines.0 is defined
    #   retries: "{{ DESCRIPTOR_RETRIES }}"
    #   delay: "{{ DELAY }}"
    #   until: ( not LCMD_DB_Id ) or ( {{LCMDStatus|lower}} in "Deleted"|lower ) or ( {{LCMDStatus|lower}} in "Failed"|lower )
    #
    # - name: fail the play if the previous command did not succeed
    #   fail: msg="LCMD is in {{LCMDStatus}} state... Somthing went wrong, Please check the logs or DB"
    #   when: (LCMDStatus is defined) and not ( ( LCMDStatus|lower in "Deleted"|lower ) or ( LCMDStatus|lower in "Failed"|lower ) )
