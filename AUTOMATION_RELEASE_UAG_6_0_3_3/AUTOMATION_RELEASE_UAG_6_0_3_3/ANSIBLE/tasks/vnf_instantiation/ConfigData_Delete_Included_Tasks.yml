---
  - name: "Set Vars"
    vars:
      descriptor_folder_index: "{{ ( (item.0.file_path.split('/')|length) - 2 ) | int }}"
    set_fact:
      descriptor_folder: "{{ item.0.file_path.split('/')[(descriptor_folder_index | int)] }}"
      name_to_be_used: "{{item.0.vduid}}_CONFIG-{{item.1}}"
      vdu_id: "{{item.0.vduid}}"
      vnfd_version: "{{item.1}}"
      vnfd_id: "{{item.2}}"
      NAMESPACE_IN_CONFIG: 0
      CONFIG_MODEL_NAMESPACE: 1

  - name: "Get Namespace from Config file"
    shell: "grep '<sys xmlns=' {{DESCRIPTOR_PATH}}{{descriptor_folder}}/Config/{{CONFIG_FILES[vdu_id]}}  | awk -F'\"' '{print $2}'"
    register: namespace_config_file
    when: CONFIG_FILES[vdu_id] is defined
    delegate_to: localhost

  - set_fact: NAMESPACE_IN_CONFIG="{{ namespace_config_file.stdout_lines.0 }}"
    when: namespace_config_file.stdout_lines.0 is defined and CONFIG_FILES[vdu_id] is defined

  - include_tasks: ./query_db.yml QUERY="select id from vnfd_descriptor where vnfd_id='{{vnfd_id}}' and version='{{vnfd_version}}'"
  - set_fact: VNFD_DB_ID={{ RESP.stdout_lines.0 }}
    when: RESP.stdout_lines.0 is defined

  - include_tasks: ./query_db.yml QUERY="select fk_vnf_data_config from vdu_config_status where fk_vnfd_descriptor='{{VNFD_DB_ID}}'"
    when: VNFD_DB_ID is defined
  - set_fact: DATA_CONFIG={{ RESP.stdout_lines.0 }}
    when: RESP.stdout_lines.0 is defined

  - include_tasks: ./query_db.yml QUERY="select fk_nsd_descriptor from vnfd_descriptor where id='{{VNFD_DB_ID}}' and version='{{vnfd_version}}'"
    when: VNFD_DB_ID is defined
  - set_fact: VNFD_NSD_ID={{ RESP.stdout_lines.0 }}
    when: RESP.stdout_lines.0 is defined

  - include_tasks: ./query_db.yml QUERY="select id from vdu_config_status where fk_vnfd_descriptor='{{VNFD_DB_ID}}'"
    when: VNFD_DB_ID is defined
  - set_fact: VDU_DB_ID={{ RESP.stdout_lines.0 }}
    when: RESP.stdout_lines.0 is defined

  - include_tasks: ./query_db.yml QUERY="select id from nsd_descriptor where id='{{VNFD_NSD_ID}}'"
    when: VNFD_NSD_ID is defined
  - set_fact: NSD_DB_ID={{ RESP.stdout_lines.0 }}
    when: RESP.stdout_lines.0 is defined

  - include_tasks: ./query_db.yml QUERY="select status from nsd_descriptor_status where fk_nsd_descriptor='{{NSD_DB_ID}}'"
    when: NSD_DB_ID is defined
  - set_fact: NSD_ID_STATUS={{ RESP.stdout_lines.0 }}
    when: RESP.stdout_lines.0 is defined

  - name: Check NSD_ID_STATUS and DATA_CONFIG
    fail:
      msg:
      - ""
      - ""
      - "################################################################"
      - "################################################################"
      - "###                                                          ###"
      - "###                                                          ###"
      - "###                                                          ###"
      - "###                    ENTRIES NOT FOUND                     ###"
      - "###                                                          ###"
      - "###                                                          ###"
      - "###                                                          ###"
      - "################################################################"
      - "################################################################"
      - ""
      - ""
    when: NSD_ID_STATUS is not defined or DATA_CONFIG is not defined

  # - name: "Check NSD_ID_STATUS and DATA_CONFIG"
  #   fail:
  #     msg: "Entries not found"
  #   when: NSD_ID_STATUS is not defined or DATA_CONFIG is not defined

  - name: Check NSD Status to Config
    fail:
      msg:
      - ""
      - ""
      - "################################################################"
      - "################################################################"
      - "###                                                          ###"
      - "###                                                          ###"
      - "###                                                          ###"
      - "###           CONFIG DATA DELETE IS NOT POSSIBLE             ###"
      - "###                 NSD STATUS: {{NSD_ID_STATUS.rjust(11)}}                  ###"
      - "###     First Terminate NSD/Deattach Offline Config data     ###"
      - "###                                                          ###"
      - "###                                                          ###"
      - "###                                                          ###"
      - "################################################################"
      - "################################################################"
      - ""
      - ""
    when: (NSD_ID_STATUS | lower == "deployed") and (DATA_CONFIG | lower != "null")
  # - name: "Check NSD_ID_STATUS to delete"
  #   fail:
  #     msg: "Config Data Delete is not possible as NSD-Status is: {{NSD_ID_STATUS.rjust(11)}} and vnf_data_config: {{DATA_CONFIG}} First Terminate NSD/Deattach Offline Config data"
  #   when: (NSD_ID_STATUS | lower == "deployed") and (DATA_CONFIG | lower == "null")

  - include_tasks: ./query_db.yml QUERY="select id from vnf_data_config where name='{{name_to_be_used}}' or name='Snapshot-{{name_to_be_used}}'"
  - set_fact: DATAMODEL_ID="{{RESP.stdout_lines.0}}"
    when: RESP.stdout_lines.0 is defined

  - include_tasks: ./query_db.yml QUERY="select vnf_data_config.id from vnf_data_config INNER JOIN data_model ON vnf_data_config.fk_data_model=data_model.id where data_model.nsd_id={{NSD_DB_ID}}"
  - set_fact: DEL_IDS="{{RESP.stdout_lines}}"

  - name: Getting Access Token
    uri:
        url: "{{LOGIN_URL}}"
        method: "POST"
        body: '{"authType": "LOCAL", "password": "{{CMS_WEB_PASSWORD}}", "username": "{{CMS_WEB_USER}}"}'
        status_code:  200
        body_format: json
        validate_certs: no
    register: login_response
    delegate_to: localhost

  - shell: "curl -s -k -X \"DELETE\" --cookie '{{login_response.set_cookie}}' {{IMPORT_SNAPSHOT_CONFIG_URL}}/null/{{item}}"
    delegate_to: localhost
    with_items: "{{DEL_IDS}}"
    register: curl_resp

  # - name: "Delete Config Entry"
  #   shell: "curl -s -k -X \"DELETE\" --cookie '{{login_response.set_cookie}}' {{IMPORT_SNAPSHOT_CONFIG_URL}}/null/{{DATAMODEL_ID}}"
  #   register: curl_resp
  #   delegate_to: localhost

  - name: "Print CURL Response"
    debug:
      msg: "{{curl_resp}}"
    when: curl_resp is defined
