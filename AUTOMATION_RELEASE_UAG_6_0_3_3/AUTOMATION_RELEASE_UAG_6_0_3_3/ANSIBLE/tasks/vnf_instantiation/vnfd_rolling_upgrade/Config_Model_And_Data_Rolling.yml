- shell: "grep -r '<vnfd-id>{{item.key}}</vnfd-id>' {{DESCRIPTOR_PATH}}/{{DESCRIPTOR_INFO.0}}/ | awk '{print $1}' | grep VNFD | cut -d ':' -f1"
  register: VNFD_FILES
  with_dict: "{{VNFD_UPGRADE_PARAMS}}"
  delegate_to: localhost

- xml:
    xmlstring: "{{lookup('file', '{{item.stdout_lines.0}}') | regex_replace('xmlns=.*>', '>')}}"
    xpath: vnfd-list/vdu/id
    content: text
  register: VDU_IDS
  with_items: "{{VNFD_FILES.results}}"
  delegate_to: localhost

- set_fact:
    VDU_ID_LIST: []

- set_fact:
    VDU_ID_LIST: "{{VDU_ID_LIST}} + [ '{{item.matches[0]['id']}}' ]"
  with_list: "{{VDU_IDS.results}}"

- debug: msg="{{VDU_ID_LIST}}"

- set_fact:
    VNFD_IDS: []
    VNFD_VERSIONS: []
    YANG_FILE_NAMES: []
    CONFIG_FILE_NAMES: []
    CONFIG_MODEL_VNFD_DB_IDS: []
    CONFIG_MODEL_NSD_DB_IDS: []
    QUERY_BUILDER: ""
    ORDER_BUILDER: ""


- set_fact:
    VNFD_IDS: "{{VNFD_IDS}} + [ '{{item.key}}' ]"
    VNFD_VERSIONS: "{{VNFD_VERSIONS}} + [ \"{{item.value['NEW_VERSION']}}\" ]"
    YANG_FILE_NAMES: "{{YANG_FILE_NAMES}} + [ \"{{item.value['NEW_CONFIG_MODEL']}}\" ] "
    CONFIG_FILE_NAMES: "{{CONFIG_FILE_NAMES}} + [ \"{{item.value['NEW_CONFIG_DATA']}}\" ] "
  with_dict: "{{VNFD_UPGRADE_PARAMS}}"

- shell: "grep '<sys xmlns=' {{DESCRIPTOR_PATH}}/{{DESCRIPTOR_INFO.0}}/Config/{{item}}  | awk -F'\"' '{print $2}'"
  register: NAMESPACES
  with_items: "{{CONFIG_FILE_NAMES}}"
  delegate_to: localhost

- set_fact:
    NAMESPACES_LIST_ROLLING: []

- set_fact:
    NAMESPACES_LIST_ROLLING: "{{NAMESPACES_LIST_ROLLING}} + [ '{{item.stdout}}' ]"
  with_list: "{{NAMESPACES.results}}"

- set_fact:
    QUERY_BUILDER: "{{QUERY_BUILDER}} OR ( vnfd_id='{{Q_VNFD_ID}}' AND version='{{VNFD_VERSIONS[MODEL_CMD_INDEX]}}') "
    ORDER_BUILDER: "{{ORDER_BUILDER}} WHEN '{{Q_VNFD_ID}}' THEN '{{MODEL_CMD_INDEX}}'"
  loop: "{{VNFD_IDS}}"
  loop_control:
    loop_var: Q_VNFD_ID
    index_var: MODEL_CMD_INDEX

- set_fact:
    QUERY_BUILDER: "{{QUERY_BUILDER[3:]}}"

- include_tasks: ./query_db.yml QUERY="select id ,fk_nsd_descriptor from vnfd_descriptor where {{QUERY_BUILDER}} ORDER BY CASE vnfd_id {{ORDER_BUILDER}} END"

- fail:
    msg:
      - "#####################################################################################################################################################"
      - "#####################################################################################################################################################"
      - "#####"
      - "#####"
      - "#####"
      - "#####          Expected {{VNFD_IDS|length}} VNFDs, found {{RESP.stdout_lines|length}}"
      - "#####          Please Check if all the VNFDs are uploaded"
      - "#####"
      - "#####"
      - "#####"
      - "#####################################################################################################################################################"
      - "#####################################################################################################################################################"
  when: not RESP.stdout_lines|length == VNFD_IDS|length

- set_fact:
    CONFIG_MODEL_VNFD_DB_IDS: "{{CONFIG_MODEL_VNFD_DB_IDS}} + [ '{{DB_OUT.split('\t')[0]}}' ]"
    CONFIG_MODEL_NSD_DB_IDS: "{{CONFIG_MODEL_NSD_DB_IDS}} + [ '{{DB_OUT.split('\t')[1]}}' ]"
  loop: "{{RESP.stdout_lines}}"
  loop_control:
    loop_var: DB_OUT

- name: Getting Access Token
  uri:
      url: "{{LOGIN_URL}}"
      method: "POST"
      body: '{"authType": "LOCAL", "password": "{{CMS_WEB_PASSWORD}}", "username": "{{CMS_WEB_USER}}"}'
      status_code:  200
      body_format: json
      validate_certs: no
  register: login_response
  delegate_to: localhost

- include_tasks: ../Quick/ConfigModel_Add/ConfigModel_Add_WithYang.yml PARAM_YANG_FILE_NAME="{{MODEL_VALUES}}" PARAM_VDU_ID="{{VDU_ID_LIST[MODEL_INDEX]}}" PARAM_NSD_ID="{{CONFIG_MODEL_NSD_DB_IDS[MODEL_INDEX]}}" PARAM_VNFD_ID="{{CONFIG_MODEL_VNFD_DB_IDS[MODEL_INDEX]}}"
  when: MODEL_VALUES is search(".zip")
  loop: "{{YANG_FILE_NAMES}}"
  loop_control:
    loop_var: MODEL_VALUES
    index_var: MODEL_INDEX

- include_tasks: ../Quick/ConfigModel_Add/ConfigModel_Add_WithoutYang.yml PARAM_YANG_FILE_NAME="{{MODEL_VALUES}}" PARAM_VDU_ID="{{VDU_ID_LIST[MODEL_INDEX]}}" PARAM_NSD_ID="{{CONFIG_MODEL_NSD_DB_IDS[MODEL_INDEX]}}" PARAM_VNFD_ID="{{CONFIG_MODEL_VNFD_DB_IDS[MODEL_INDEX]}}"
  when: not MODEL_VALUES is search(".zip")
  loop: "{{YANG_FILE_NAMES}}"
  loop_control:
    loop_var: MODEL_VALUES
    index_var: MODEL_INDEX


#########################################################
######               CONFIG DATA                   ######
#########################################################

- set_fact:
    QUERY_BUILDER: ""
    ORDER_BUILDER: ""
    DATA_MODEL_DB_IDS: []

- set_fact:
    QUERY_BUILDER: "{{QUERY_BUILDER}} OR ( vnfd_id = (select id from vnfd_descriptor where vnfd_id='{{Q_VNFD_ID}}' AND version='{{VNFD_VERSIONS[MODEL_CMD_INDEX]}}') AND namespace LIKE '%{{NAMESPACES_LIST_ROLLING[MODEL_CMD_INDEX]}}%' ) "
    ORDER_BUILDER: "{{ORDER_BUILDER}} WHEN (select id from vnfd_descriptor where vnfd_id='{{Q_VNFD_ID}}' AND version='{{VNFD_VERSIONS[MODEL_CMD_INDEX]}}') THEN '{{MODEL_CMD_INDEX}}'"
  loop: "{{VNFD_IDS}}"
  loop_control:
    loop_var: Q_VNFD_ID
    index_var: MODEL_CMD_INDEX

- set_fact:
    QUERY_BUILDER: "{{QUERY_BUILDER[3:]}}"

- include_tasks: ./query_db.yml QUERY="select id from data_model where {{QUERY_BUILDER}} ORDER BY CASE vnfd_id {{ORDER_BUILDER}} END"

- set_fact:
    DATA_MODEL_DB_IDS: "{{DATA_MODEL_DB_IDS}} + [ '{{DB_OUT}}' ]"
  loop: "{{RESP.stdout_lines}}"
  loop_control:
    loop_var: DB_OUT

- name: Getting Access Token
  uri:
      url: "{{LOGIN_URL}}"
      method: "POST"
      body: '{"authType": "LOCAL", "password": "{{CMS_WEB_PASSWORD}}", "username": "{{CMS_WEB_USER}}"}'
      status_code:  200
      body_format: json
      validate_certs: no
  register: login_response
  delegate_to: localhost

- include_tasks: ../Quick/ConfigData_Add/ConfigData_Add.yml DATA_MODEL_DB_ID="{{DM_DB_ID}}" CONFIG_FILE_NAME="{{CONFIG_FILE_NAMES[CONTROL_INDEX]}}" VDU_ID="{{VDU_ID_LIST[CONTROL_INDEX]}}"
  loop: "{{DATA_MODEL_DB_IDS}}"
  loop_control:
    loop_var: DM_DB_ID
    index_var: CONTROL_INDEX
