- set_fact:
    NAME_TO_BE_USED: "{{PARAM_YANG_FILE_NAME[:30]| replace('.zip', '')}}-{{PARAM_VDU_ID}}"
    FILE_ABS_PATH: "{{DESCRIPTOR_PATH}}/{{DESCRIPTOR_INFO.0}}/Yang/{{PARAM_YANG_FILE_NAME}}"
- set_fact:
    NAME_TO_BE_USED: "{{NAME_TO_BE_USED[:49]}}"

- shell: "curl -s -k -X POST -F file=@'{{FILE_ABS_PATH}}; type=application/x-zip-compressed' -F rowData=\"{'id':'','name':'{{NAME_TO_BE_USED}}','namespace':'','descriptorType':'modelWithDescriptor','dataModelType':'modelWithSchema','nsdId':'{{PARAM_NSD_ID}}','vnfdId':'{{PARAM_VNFD_ID}}','vduId':'{{PARAM_VDU_ID}}','filePath':'{{FILE_ABS_PATH}}','uploadDatetime':''}\" --cookie '{{login_response.set_cookie}}' {{DESCRIPTOR_UPLOAD_URL}}/data_model"
  register: curl_resp
  delegate_to: localhost

- include_tasks: ../../query_db.yml QUERY="select id, namespace from data_model order by id desc"
  when: curl_resp.stdout is search("already exists")

- shell: "printf '{{RESP.stdout}}' | awk '{print $2}'"
  register: NAMESPACES_LIST
  delegate_to: localhost
  when: curl_resp.stdout is search("already exists")

- set_fact:
    NAMESPACES_LIST_1: "{{NAMESPACES_LIST.stdout_lines}}"
  when: NAMESPACES_LIST.stdout_lines is defined

- set_fact:
    NAMESPACES_LIST_1: []
  when: not NAMESPACES_LIST.stdout_lines is defined

- set_fact: ID_INDEX="{{CURRENT_INDEX}}"
  when: curl_resp.stdout is search(CHECK_NAMESPACE)
  loop: "{{NAMESPACES_LIST_1}}"
  loop_control:
    loop_var: CHECK_NAMESPACE
    index_var: CURRENT_INDEX

- shell: "printf '{{RESP.stdout_lines[ID_INDEX]}}' | awk '{print $1}'"
  register: FK_DATAMODEL_ID
  delegate_to: localhost
  when: curl_resp.stdout is search("already exists")


- shell: "curl -d 'listName=data_model&rowData={\"id\":\"\",\"name\":\"{{NAME_TO_BE_USED}}\",\"descriptorType\":\"modelWithDescriptor\",\"dataModelType\":\"modelWithExistingSchema\",\"nsdId\":\"{{PARAM_NSD_ID}}\",\"vnfdId\":\"{{PARAM_VNFD_ID}}\",\"vduId\":\"{{PARAM_VDU_ID}}\", \"fkDataModel\":\"{{FK_DATAMODEL_ID.stdout_lines.0}}\"}' --cookie '{{login_response.set_cookie}}' -H \"Content-Type: application/x-www-form-urlencoded\" -k -X POST {{DESCRIPTOR_UPLOAD_URL}}/data_model"
  register: curl_resp_1
  delegate_to: localhost
  when: curl_resp.stdout is search("already exists")

- debug: msg="{{curl_resp_1}}"
  when: curl_resp.stdout is search("already exists")

- debug: msg="{{curl_resp}}"

- fail:
    msg:
      - "#####################################################################################################################################################"
      - "#####################################################################################################################################################"
      - "#####"
      - "#####"
      - "#####"
      - "#####          Failed to Create Config Model"
      - "#####          YANG FILE: {{PARAM_YANG_FILE_NAME}} "
      - "#####"
      - "#####"
      - "#####"
      - "#####################################################################################################################################################"
      - "#####################################################################################################################################################"
  when: curl_resp.stdout|lower is search("Failed"|lower)
# - debug: msg="{{PARAM_YANG_FILE_NAME}} {{PARAM_VDU_ID}} {{PARAM_NSD_ID}} {{PARAM_VNFD_ID}}"
