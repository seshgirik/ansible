---
  - name: "Set Vars"
    vars:
      descriptor_folder_index: "{{ ( (item.0.file_path.split('/')|length) - 2 ) | int }}"
    set_fact:
      descriptor_folder: "{{ item.0.file_path.split('/')[(descriptor_folder_index | int)] }}"
      name_to_be_used: "{{item.0.vduid}}_CONFIG-{{item.1}}"
      vdu_id: "{{item.0.vduid}}"
      vnfd_version: "{{item.1}}"
      vnfd_id: "{{item.2}}"
      NAMESPACE_IN_CONFIG: ""
      CONFIG_MODEL_NAMESPACE: ""

  - name: "Get Namespace from Config file"
    shell: "grep '<sys xmlns=' {{DESCRIPTOR_PATH}}/{{descriptor_folder}}/Config/{{CONFIG_FILES[vdu_id]}}  | awk -F'\"' '{print $2}'"
    register: namespace_config_file
    when: CONFIG_FILES[vdu_id] is defined
    delegate_to: localhost

  - set_fact: NAMESPACE_IN_CONFIG={{ namespace_config_file.stdout_lines.0 }}
    when: namespace_config_file.stdout_lines.0 is defined and CONFIG_FILES[vdu_id] is defined

  - set_fact:
      CONFIG_DATA_FOR_DSC: "true"
    when: not namespace_config_file.stdout_lines.0 is defined

  - set_fact:
      CONFIG_DATA_FOR_DSC: "false"
    when: namespace_config_file.stdout_lines.0 is defined

  - include_tasks: ./query_db.yml QUERY="select id from vnfd_descriptor where vnfd_id='{{vnfd_id}}' and version='{{vnfd_version}}'"
  - set_fact: VNFD_DB_ID={{ RESP.stdout_lines.0 }}
    when: RESP.stdout_lines.0 is defined

  - include_tasks: ./query_db.yml QUERY="select id from data_model where vnfd_id='{{VNFD_DB_ID}}' and namespace LIKE '%{{NAMESPACE_IN_CONFIG}}%'"
    when: VNFD_DB_ID is defined
  - set_fact: DATA_MODEL_ID={{ RESP.stdout_lines.0 }}
    when: RESP.stdout_lines.0 is defined

  - include_tasks: ./query_db.yml QUERY="select namespace from data_model where vnfd_id='{{VNFD_DB_ID}}' and namespace LIKE '%{{NAMESPACE_IN_CONFIG}}%'"
    when: DATA_MODEL_ID is defined
  - set_fact: CONFIG_MODEL_NAMESPACE={{ RESP.stdout_lines.0 }}
    when: RESP.stdout_lines.0 is defined

#  - name: "Install CURL if not present"
#    apt:
#      name: curl
#      state: present
#    become: yes
#    become_method: sudo
#    become_user: root
#    delegate_to: localhost

  # - debug:
  #     msg: "curl -s  -k -X  POST -F file=@'{{DESCRIPTOR_PATH}}{{descriptor_folder}}/Config/{{CONFIG_FILES[vdu_id]}}; type = text/xml' -F
  #           \"{{lookup('template', '../../templates/vnf_instantiation/CONFIGDATA_ADD.j2')}}\" {{IMPORT_SNAPSHOT_CONFIG_URL}}"

  - name: Getting Access Token
    uri:
        url: "{{LOGIN_URL}}"
        method: "POST"
        body: '{"authType": "LOCAL", "password": "{{CMS_WEB_PASSWORD}}", "username": "{{CMS_WEB_USER}}"}'
        status_code:  200
        body_format: json
        validate_certs: no
    register: login_response
    delegate_to: localhost


  - name: "Upload config data for DSC/DA (Skips if not for DSC/DA)"
    shell: "curl -s  -k -X  POST -F file=@'{{DESCRIPTOR_PATH}}{{descriptor_folder}}/Config/{{CONFIG_FILES[vdu_id]}}; type = text/xml' -F rowData=\"{'id':'',  'name':'{{name_to_be_used[:40]}}',  'fkDataModel':'{{DATA_MODEL_ID}}',  'attachFile':'{{CONFIG_FILES[vdu_id]}}'}\" --cookie '{{login_response.set_cookie}}' {{IMPORT_SNAPSHOT_CONFIG_URL}}"
    register: curl_resp
    delegate_to: localhost
    when: CONFIG_DATA_FOR_DSC|lower == "true"

  - name: "Upload config data for mOne (Skips if not for mOne)"
    shell: "curl -s  -k -X POST -F file=@'{{DESCRIPTOR_PATH}}{{descriptor_folder}}/Config/{{CONFIG_FILES[vdu_id]}}; type = text/xml' -F rowData=\"{'id':'',  'name':'{{name_to_be_used[:40]}}',  'fkDataModel':'{{DATA_MODEL_ID}}',  'attachFile':'{{CONFIG_FILES[vdu_id]}}'}\" --cookie '{{login_response.set_cookie}}' {{IMPORT_SNAPSHOT_CONFIG_URL}}"
    register: curl_resp
    delegate_to: localhost
    when: NAMESPACE_IN_CONFIG == CONFIG_MODEL_NAMESPACE

  - name: "Check if Yang Version in Data Model and Config file Match"
    debug:
      msg: "Yang Version in Data Model and Config file does not Match"
    when: NAMESPACE_IN_CONFIG != CONFIG_MODEL_NAMESPACE and CONFIG_DATA_FOR_DSC == "false"

  - name: "Print CURL Response"
    debug:
      msg: "{{curl_resp}}"
    when: curl_resp is defined
