---

- hosts: localhost
  gather_facts: no
  vars_files:
    - ../../vars/heat_templates/config.yml

  tasks:
    - name: "Delete old host"
      shell: "rm -rf ~/.ssh/known_hosts"
      delegate_to: localhost
      args:
        warn: false
    - include_tasks: setup_pwdless_generic.yml PWDLESS_IP="{{VNFM1_IP}}" PWDLESS_USER="{{VNFM1_USER}}" PWDLESS_PASSWD="{{VNFM1_PASSWORD}}"

    - name: Checking vnfm1 status
      shell: "service vnfm status | grep Synced"
      register: STATUS_RESP_SYNCED
      remote_user: "{{VNFM1_USER}}"
      delegate_to: "{{VNFM1_IP}}"

    - name: Checking vnfm1 status
      shell: "service vnfm status | grep CLUSTERED"
      register: STATUS_RESP_CLUSTERD
      remote_user: "{{VNFM1_USER}}"
      delegate_to: "{{VNFM1_IP}}"

    - debug: msg="VNFMs are not synced"
      when: not STATUS_RESP_SYNCED.stdout_lines.0 is defined

    - debug: msg="VNFMs are not CLUSTURED"
      when: (not STATUS_RESP_CLUSTERD.stdout_lines.0 is defined) and (VNFM_STANDALONE|lower == "false")

    - fail:
      when: (not STATUS_RESP_SYNCED.stdout_lines.0 is defined) and (not STATUS_RESP_CLUSTERD.stdout_lines.0 is defined) and (VNFM_STANDALONE|lower == "false")

    - command: "mysql -uroot -pmavenir VnfmDB -sN -e \"select count(STATE) from Deployment_Table where NOT STATE='InstantiatedConfiguredActive'\""
      register: STATUS_RESP
      remote_user: "{{VNFM1_USER}}"
      delegate_to: "{{VNFM1_IP}}"

    - fail:
        msg:
          - "###########################################################################################################"
          - "###########################################################################################################"
          - "###"
          - "###"
          - "###"
          - "###          CANNOT PERFORM VNFM UPGRADE - {{STATUS_RESP.stdout_lines.0}} VMs are not in InstantiatedConfiguredActive state"
          - "###          Please Resolve the Issue and Try Again"
          - "###"
          - "###"
          - "###"
          - "###########################################################################################################"
          - "###########################################################################################################"
      when: STATUS_RESP.stdout_lines.0 != "0"

    - shell: "cat /opt/Install/VnfmDBUpgrade/vnfm_upg_version.txt | awk '{print $1}' | grep {{VNFM_UPGRADE_VERSION}}"
      register: GREP_VAL
      remote_user: "{{VNFM1_USER}}"
      delegate_to: "{{VNFM1_IP}}"
      ignore_errors: yes

    - shell: "printf '\n{{VNFM_UPGRADE_VERSION}}  {{VNFM_OLD_VERSION}}  - - 0 1 1'"
      remote_user: "{{VNFM1_USER}}"
      delegate_to: "{{VNFM1_IP}}"
      when: not GREP_VAL.stdout_lines.0 is defined

    - shell: "mv /opt/Install/VnfmDBUpgrade/VnfmDBExport.sh /opt/Install/VnfmDBUpgrade/VnfmDBExport_bck.sh"
      remote_user: "{{VNFM1_USER}}"
      delegate_to: "{{VNFM1_IP}}"

    - shell: "sed -i 's/##!CASSANDRA_BACKUP##!/flag={{CASSANDRA_BACKUP}}#THIS_IS_CASSANDRA_BACKUP_FLAG/g' {{playbook_dir}}/../../files/heat_templates/VnfmDBExport.sh"
      delegate_to: localhost

    - name: "Copy file VnfmDBExport.sh from {{playbook_dir}}/../../files/heat_templates/ directory in localhost to /opt/Install/VnfmDBUpgrade/ in the remote host"
      copy:
        src: "{{playbook_dir}}/../../files/heat_templates/VnfmDBExport.sh"
        dest: "/opt/Install/VnfmDBUpgrade/"
      remote_user: "{{VNFM1_USER}}"
      delegate_to: "{{VNFM1_IP}}"

    - shell: "cat {{playbook_dir}}/../../files/heat_templates/VnfmDBExport.sh | grep '#THIS_IS_CASSANDRA_BACKUP_FLAG'"
      register: "GREP_OUT"
      delegate_to: localhost

    - shell: "sed -i 's/{{GREP_OUT.stdout_lines.0}}/##!CASSANDRA_BACKUP##!/g' {{playbook_dir}}/../../files/heat_templates/VnfmDBExport.sh"
      delegate_to: localhost

    - shell: "cat {{playbook_dir}}/../../files/heat_templates/config_files/VNFM_IPv4_Active1.env | grep VNFM_VNF_Name | cut -d\":\" -f2 | awk '{print $1}'"
      register: SERVER_NAME

    - set_fact:
        SERVER_NAME: "{{SERVER_NAME.stdout_lines.0}}"

    - name: Getting Access Token
      uri:
          url: "https://{{CMS_IP}}:18080/cms-service/webapi/login"
          method: "POST"
          body: '{"authType": "LOCAL", "password": "{{CMS_WEB_PASSWORD}}", "username": "{{CMS_WEB_USER}}"}'
          status_code:  200
          body_format: json
          validate_certs: no
      register: login_response

    - include_tasks: setup_pwdless_generic.yml PWDLESS_IP="{{CMS_IP}}" PWDLESS_USER="{{CMS_SYS_USER}}" PWDLESS_PASSWD="{{CMS_SYS_PASSWORD}}"
    - shell: 'mysql -u controlDb -pmavenir cms -sN -e "select id, name, ipType, protocolType, ip_address, port, user_name, password, mode, status, maintenance_mode, created_datetime from vnfm_config"'
      register: RESP
      remote_user: "{{CMS_SYS_USER}}"
      delegate_to: "{{CMS_IP}}"

    - shell: "curl -s  -k -X POST -d \"rowData={'id':{{VNFM_DETAILS.split('\t')[0]}},'name':'{{VNFM_DETAILS.split('\t')[1]}}','ipType':'{{VNFM_DETAILS.split('\t')[2]}}','protocolType':'{{VNFM_DETAILS.split('\t')[3]}}','ipAddress':'{{VNFM_DETAILS.split('\t')[4]}}','port':{{VNFM_DETAILS.split('\t')[5]}},'userName':'{{VNFM_DETAILS.split('\t')[6]}}','password':'{{VNFM_DETAILS.split('\t')[7]}}','mode':'{{VNFM_DETAILS.split('\t')[8]}}','status':'{{VNFM_DETAILS.split('\t')[9]}}','maintenanceMode':'ENABLE_MAINTENANCE_MODE','createdDatetime':'{{VNFM_DETAILS.split('\t')[11]}}'}\"  --cookie '{{login_response.set_cookie}}' https://{{CMS_IP}}:18080/cms-service/webapi/maintenance/vnfm_config"
      register: HTTP_RES
      delegate_to: localhost
      loop: "{{RESP.stdout_lines}}"
      loop_control:
        loop_var: VNFM_DETAILS

    - shell: "rm -rf /tmp/vnfm_db_* && rm -rf /tmp/vnfm_db && chmod +x /opt/Install/VnfmDBUpgrade/VnfmDBExport.sh && source /etc/profile && /opt/Install/VnfmDBUpgrade/VnfmDBExport.sh && mv /tmp/vnfm_db_* /tmp/vnfm_db && cd /tmp/vnfm_db/ && mv /tmp/vnfm_db/vnfm_db*.tgz /tmp/vnfm_db/vnfm_db.tgz"
      remote_user: "{{VNFM1_USER}}"
      delegate_to: "{{VNFM1_IP}}"

    - debug: msg="sshpass -p {{VNFM1_PASSWORD}} scp -r {{VNFM1_USER}}@{{VNFM1_IP}}:/tmp/vnfm_db/ {{playbook_dir}}/../../files/heat_templates/vnfm_backup/ -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
    - name: "fetch sql dump from vnfm1"
      shell: "sshpass -p {{VNFM1_PASSWORD}} /usr/bin/scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r {{VNFM1_USER}}@{{VNFM1_IP}}:/tmp/vnfm_db/vnfm_db.tgz {{playbook_dir}}/../../files/heat_templates/vnfm_backup/"
      delegate_to: localhost

    - name: "fetch ssl from vnfm1"
      shell: "sshpass -p {{VNFM1_PASSWORD}} /usr/bin/scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r {{VNFM1_USER}}@{{VNFM1_IP}}:/opt/tomcat_latest/ctrl_certs {{playbook_dir}}/../../files/heat_templates/vnfm_backup/ssl_vnfm_1"
      ignore_errors: yes
      delegate_to: localhost

    - name: "fetch ssl from vnfm2"
      shell: "sshpass -p {{VNFM2_PASSWORD}} /usr/bin/scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r {{VNFM2_USER}}@{{VNFM2_IP}}:/opt/tomcat_latest/ctrl_certs {{playbook_dir}}/../../files/heat_templates/vnfm_backup/ssl_vnfm_2"
      ignore_errors: yes
      delegate_to: localhost

    # - name: Query DB
    #   command: 'mysql -u root -pmavenir VnfmDB -sN -e "select popDetails_POP_ID from CLOUD_PROFILE"'
    #   register: RESP
    #   remote_user: "{{VNFM1_USER}}"
    #   delegate_to: "{{VNFM1_IP}}"
    #
    # - shell: "echo {{RESP.stdout_lines.0}} | cut -d'-' -f2"
    #   register: CONTROLLER_IP_OUT

    - set_fact:
        CONTROLLER_IP: "{{CONTROLLER}}"

    - include_tasks: setup_pwdless_generic.yml PWDLESS_IP="{{CONTROLLER_IP}}" PWDLESS_PASSWD="{{PASSWD}}" PWDLESS_USER="{{USER}}"

    - shell: "source {{KEYSTONE_SOURCE_PATH}} && openstack stack delete {{VNFM_ACTIVE1_STACK_NAME}}"
      delegate_to: "{{CONTROLLER_IP}}"
      remote_user: "{{USER}}"

    - shell: "source {{KEYSTONE_SOURCE_PATH}} && openstack stack delete {{VNFM_ACTIVE2_STACK_NAME}}"
      delegate_to: "{{CONTROLLER_IP}}"
      remote_user: "{{USER}}"

    - pause: minutes=2
    - set_fact:
        CONTROLLER_IP_1: "{{CONTROLLER_IP}}"
    - include_tasks: vnfm_heat.yml CONTROLLER_IP="{{CONTROLLER_IP_1}}"

    - name: "Delete old host"
      shell: "rm -rf ~/.ssh/known_hosts"
      delegate_to: localhost
      args:
        warn: false
    - include_tasks: setup_pwdless_generic.yml PWDLESS_IP="{{VNFM1_IP}}" PWDLESS_PASSWD="{{VNFM1_PASSWORD}}" PWDLESS_USER="{{VNFM1_USER}}"

    - name: "Copy file vnfm_backup/* from {{playbook_dir}}/../../files/heat_templates/ directory in localhost to /opt/Install/VnfmDBUpgrade/ in the remote host"
      copy:
        src: "{{playbook_dir}}/../../files/heat_templates/vnfm_backup/vnfm_db.tgz"
        dest: "/tmp/"
      remote_user: "{{VNFM1_USER}}"
      delegate_to: "{{VNFM1_IP}}"

    - include_tasks: setup_pwdless_generic.yml PWDLESS_IP="{{VNFM2_IP}}" PWDLESS_PASSWD="{{VNFM2_PASSWORD}}" PWDLESS_USER="{{VNFM2_USER}}"

    - shell: "mv /opt/Install/VnfmDBUpgrade/VnfmDBImport.sh /opt/Install/VnfmDBUpgrade/VnfmDBImport_bck.sh"
      remote_user: "{{VNFM1_USER}}"
      delegate_to: "{{VNFM1_IP}}"

    - shell: "sed -i 's/##!CASSANDRA_BACKUP##!/flag={{CASSANDRA_BACKUP}}#THIS_IS_CASSANDRA_BACKUP_FLAG/g' {{playbook_dir}}/../../files/heat_templates/VnfmDBImport.sh"
      delegate_to: localhost

    - name: "Copy file VnfmDBImport.sh from {{playbook_dir}}/../../files/heat_templates/ directory in localhost to /opt/Install/VnfmDBUpgrade/ in the remote host"
      copy:
        src: "{{playbook_dir}}/../../files/heat_templates/VnfmDBImport.sh"
        dest: "/opt/Install/VnfmDBUpgrade/"
      remote_user: "{{VNFM1_USER}}"
      delegate_to: "{{VNFM1_IP}}"

    - shell: "cat {{playbook_dir}}/../../files/heat_templates/VnfmDBImport.sh | grep '#THIS_IS_CASSANDRA_BACKUP_FLAG'"
      register: "GREP_OUT"
      delegate_to: localhost

    - shell: "sed -i 's/{{GREP_OUT.stdout_lines.0}}/##!CASSANDRA_BACKUP##!/g' {{playbook_dir}}/../../files/heat_templates/VnfmDBImport.sh"
      delegate_to: localhost

    - shell: "cd /tmp/ && tar -xzf /tmp/vnfm_db.tgz && mv /tmp/vnfm_db_* /tmp/vnfm_db_folder"
      remote_user: "{{VNFM1_USER}}"
      delegate_to: "{{VNFM1_IP}}"

    - shell: "chmod +x /opt/Install/VnfmDBUpgrade/VnfmDBImport.sh && source /etc/profile && /opt/Install/VnfmDBUpgrade/VnfmDBImport.sh /tmp/vnfm_db_folder"
      remote_user: "{{VNFM1_USER}}"
      delegate_to: "{{VNFM1_IP}}"

    - name: "copy ssl to vnfm1"
      shell: "sshpass -p {{VNFM1_PASSWORD}} /usr/bin/scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r {{playbook_dir}}/../../files/heat_templates/vnfm_backup/ssl_vnfm_1/* {{VNFM1_USER}}@{{VNFM1_IP}}:/opt/tomcat_latest/"
      ignore_errors: yes
      delegate_to: localhost

    - name: "copy ssl from vnfm2"
      shell: "sshpass -p {{VNFM2_PASSWORD}} /usr/bin/scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r {{playbook_dir}}/../../files/heat_templates/vnfm_backup/ssl_vnfm_2/* {{VNFM2_USER}}@{{VNFM2_IP}}:/opt/tomcat_latest/"
      ignore_errors: yes
      delegate_to: localhost

    - shell: "service vnfm restart"
      remote_user: "{{VNFM1_USER}}"
      delegate_to: "{{VNFM1_IP}}"

    - shell: "service vnfm restart"
      remote_user: "{{VNFM2_USER}}"
      delegate_to: "{{VNFM2_IP}}"

    - shell: 'mysql -u controlDb -pmavenir cms -sN -e "select id, name, ipType, protocolType, ip_address, port, user_name, password, mode, status, maintenance_mode, created_datetime from vnfm_config"'
      register: RESP
      remote_user: "{{CMS_SYS_USER}}"
      delegate_to: "{{CMS_IP}}"

    - name: Getting Access Token
      uri:
          url: "https://{{CMS_IP}}:18080/cms-service/webapi/login"
          method: "POST"
          body: '{"authType": "LOCAL", "password": "{{CMS_WEB_PASSWORD}}", "username": "{{CMS_WEB_USER}}"}'
          status_code:  200
          body_format: json
          validate_certs: no
      register: login_response

    - shell: "curl -s  -k -X POST -d \"rowData={'id':{{VNFM_DETAILS.split('\t')[0]}},'name':'{{VNFM_DETAILS.split('\t')[1]}}','ipType':'{{VNFM_DETAILS.split('\t')[2]}}','protocolType':'{{VNFM_DETAILS.split('\t')[3]}}','ipAddress':'{{VNFM_DETAILS.split('\t')[4]}}','port':{{VNFM_DETAILS.split('\t')[5]}},'userName':'{{VNFM_DETAILS.split('\t')[6]}}','password':'{{VNFM_DETAILS.split('\t')[7]}}','mode':'{{VNFM_DETAILS.split('\t')[8]}}','status':'{{VNFM_DETAILS.split('\t')[9]}}','maintenanceMode':'DISABLE_MAINTENANCE_MODE','createdDatetime':'{{VNFM_DETAILS.split('\t')[11]}}'}\"  --cookie '{{login_response.set_cookie}}' https://{{CMS_IP}}:18080/cms-service/webapi/maintenance/vnfm_config"
      register: HTTP_RES
      delegate_to: localhost
      loop: "{{RESP.stdout_lines}}"
      loop_control:
        loop_var: VNFM_DETAILS
