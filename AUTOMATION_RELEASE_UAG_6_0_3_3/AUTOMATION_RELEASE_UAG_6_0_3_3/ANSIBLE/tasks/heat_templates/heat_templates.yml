- name: "Creating VNFM Server group"
  shell: "source {{KEYSTONE_SOURCE_PATH}} && openstack server group create {{VNFM_SERVER_GROUP_NAME}} --policy {{VNFM_SERVER_GROUP_POLICY}}"
  remote_user: "{{USER}}"
  when: (VNFM_STANDALONE|lower == "false") and (USE_SERVER_GROUP|lower == "true")

- name: "Creating CMS Server group"
  shell: "source {{KEYSTONE_SOURCE_PATH}} && openstack server group create {{CMS_SERVER_GROUP_NAME}} --policy {{CMS_SERVER_GROUP_POLICY}}"
  remote_user: "{{USER}}"
  when: (CMS_STANDALONE|lower == "false") and (USE_SERVER_GROUP|lower == "true")

- name: "Getting server group ID from {{VNFM_SERVER_GROUP_NAME}}"
  shell: "source {{KEYSTONE_SOURCE_PATH}} && openstack server group list | grep -i {{VNFM_SERVER_GROUP_NAME}} |awk '{print $2}'"
  remote_user: "{{USER}}"
  register: VNFM_SRV_GRP_RESP
  when: (VNFM_STANDALONE|lower == "false") and (USE_SERVER_GROUP|lower == "true")

- name: "Getting server group ID from {{CMS_SERVER_GROUP_NAME}}"
  shell: "source {{KEYSTONE_SOURCE_PATH}} && openstack server group list | grep -i {{CMS_SERVER_GROUP_NAME}} |awk '{print $2}'"
  remote_user: "{{USER}}"
  register: CMS_SRV_GRP_RESP
  when: (CMS_STANDALONE|lower == "false") and (USE_SERVER_GROUP|lower == "true")

- name: "Updating CMS_IPv4_Active.env with servergroup ID"
  shell: "sed -i 's/WILL_BE_UPDATED_DURING_RUNTIME/{{CMS_SRV_GRP_RESP.stdout_lines.0}}/g' {{playbook_dir}}/../../files/heat_templates/config_files/CMS_IPv4_Active.env"
  delegate_to: localhost
  when: (USE_SERVER_GROUP|lower == "true")

- name: "Updating CMS_IPv4_Standby.env with servergroup ID"
  shell: "sed -i 's/WILL_BE_UPDATED_DURING_RUNTIME/{{CMS_SRV_GRP_RESP.stdout_lines.0}}/g' {{playbook_dir}}/../../files/heat_templates/config_files/CMS_IPv4_Standby.env"
  delegate_to: localhost
  when: (USE_SERVER_GROUP|lower == "true")

- name: "Updating VNFM_IPv4_Active1.env with servergroup ID"
  shell: "sed -i 's/WILL_BE_UPDATED_DURING_RUNTIME/{{VNFM_SRV_GRP_RESP.stdout_lines.0}}/g' {{playbook_dir}}/../../files/heat_templates/config_files/VNFM_IPv4_Active1.env"
  delegate_to: localhost
  when: (USE_SERVER_GROUP|lower == "true")

- name: "Updating VNFM_IPv4_Active2.env with servergroup ID"
  shell: "sed -i 's/WILL_BE_UPDATED_DURING_RUNTIME/{{VNFM_SRV_GRP_RESP.stdout_lines.0}}/g' {{playbook_dir}}/../../files/heat_templates/config_files/VNFM_IPv4_Active2.env"
  delegate_to: localhost
  when: (USE_SERVER_GROUP|lower == "true")

- name: "Deleting servergroup from CMS_IPv4_Active.env"
  shell: "sed -i \"s/srvgroup_name: 'WILL_BE_UPDATED_DURING_RUNTIME'//g\" {{playbook_dir}}/../../files/heat_templates/config_files/CMS_IPv4_Active.env"
  delegate_to: localhost
  when: (USE_SERVER_GROUP|lower == "false")

- name: "Deleting servergroup CMS_IPv4_Standby.env"
  shell: "sed -i \"s/srvgroup_name: 'WILL_BE_UPDATED_DURING_RUNTIME'//g\" {{playbook_dir}}/../../files/heat_templates/config_files/CMS_IPv4_Standby.env"
  delegate_to: localhost
  when: (USE_SERVER_GROUP|lower == "false")

- name: "Deleting servergroup VNFM_IPv4_Active1.env"
  shell: "sed -i \"s/srvgroup_name: 'WILL_BE_UPDATED_DURING_RUNTIME'//g\" {{playbook_dir}}/../../files/heat_templates/config_files/VNFM_IPv4_Active1.env"
  delegate_to: localhost
  when: (USE_SERVER_GROUP|lower == "false")

- name: "Deleting servergroup VNFM_IPv4_Active2.env"
  shell: "sed -i \"s/srvgroup_name: 'WILL_BE_UPDATED_DURING_RUNTIME'//g\" {{playbook_dir}}/../../files/heat_templates/config_files/VNFM_IPv4_Active2.env"
  delegate_to: localhost
  when: (USE_SERVER_GROUP|lower == "false")

- name: "Comment NewInstallation.sh in {{VNFM_ACTIVE1_YAML_NAME}}"
  shell: "sed -i \"s/\\/opt\\/Install\\/NewInstallation.sh/#\\/opt\\/Install\\/NewInstallation.sh/g\" {{playbook_dir}}/../../files/heat_templates/config_files/{{VNFM_ACTIVE1_YAML_NAME}}"
  delegate_to: localhost

- name: "Comment NewInstallation.sh in {{VNFM_ACTIVE2_YAML_NAME}}"
  shell: "sed -i \"s/\\/opt\\/Install\\/NewInstallation.sh/#\\/opt\\/Install\\/NewInstallation.sh/g\" {{playbook_dir}}/../../files/heat_templates/config_files/{{VNFM_ACTIVE2_YAML_NAME}}"
  delegate_to: localhost
  when: (VNFM_STANDALONE|lower == "false")

- name: "Checking for CMS IMAGE"
  shell: "source {{KEYSTONE_SOURCE_PATH}} && if openstack image list|grep -q {{CMS_IMAGE_CREATION_NAME}}; then echo 'true'; else echo 'false'; fi"
  register: CMS_IMAGE_STATUS

- name: "Checking for VNFM IMAGE"
  shell: "source {{KEYSTONE_SOURCE_PATH}} && if openstack image list|grep -q {{VNFM_IMAGE_CREATION_NAME}}; then echo 'true'; else echo 'false'; fi"
  register: VNFM_IMAGE_STATUS

- name: "Download {{CMS_IMAGE_LINK}}"
  shell: "cd {{HOME_DIR}} && wget '{{CMS_IMAGE_LINK}}' -O cms.{{CMS_IMAGE_LINK.split('.')[-1]}}"
  remote_user: "{{USER}}"
  when: (CMS_IMAGE_STATUS.stdout_lines.0=="false")

- name: "Downloading {{VNFM_IMAGE_LINK}}"
  shell: "cd {{HOME_DIR}} && wget '{{VNFM_IMAGE_LINK}}' -O vnfm.{{VNFM_IMAGE_LINK.split('.')[-1]}}"
  remote_user: "{{USER}}"
  when: (VNFM_IMAGE_STATUS.stdout_lines.0=="false")

- shell: "rm -rf {{HOME_DIR}}/vnfm_img && rm -rf {{HOME_DIR}}/cms_img"
  remote_user: "{{USER}}"

- name: "Copy files *.yaml & *.env from {{playbook_dir}}/../../files/heat_templates/config_files/ directory in localhost to {{HOME_DIR}} in the remote host"
  copy:
    src: "{{playbook_dir}}/../../files/heat_templates/config_files/"
    dest: "{{HOME_DIR}}"
  remote_user: "{{USER}}"

- name: "Untar cms.{{CMS_IMAGE_LINK.split('.')[-1]}}"
  shell: "cd {{HOME_DIR}} && mkdir cms_img && tar -xvf cms.{{CMS_IMAGE_LINK.split('.')[-1]}} -C ./cms_img && cd cms_img && mv *.qcow2 cms.qcow2"
  remote_user: "{{USER}}"
  when: (CMS_IMAGE_STATUS.stdout_lines.0=="false")

- name: "Delete cms.{{CMS_IMAGE_LINK.split('.')[-1]}}"
  shell: "cd {{HOME_DIR}} && rm -rf cms.{{CMS_IMAGE_LINK.split('.')[-1]}}"
  remote_user: "{{USER}}"
  when: (CMS_IMAGE_STATUS.stdout_lines.0=="false")

- name: "Untar vnfm.{{VNFM_IMAGE_LINK.split('.')[-1]}}"
  shell: "cd {{HOME_DIR}} && mkdir vnfm_img && tar -xvf vnfm.{{VNFM_IMAGE_LINK.split('.')[-1]}} -C ./vnfm_img && cd vnfm_img && mv *.qcow2 vnfm.qcow2"
  remote_user: "{{USER}}"
  when: (VNFM_IMAGE_STATUS.stdout_lines.0=="false")

- name: "Delete vnfm.{{VNFM_IMAGE_LINK.split('.')[-1]}}"
  shell: "cd {{HOME_DIR}} && rm -rf vnfm.{{VNFM_IMAGE_LINK.split('.')[-1]}}"
  remote_user: "{{USER}}"
  when: (VNFM_IMAGE_STATUS.stdout_lines.0=="false")

- shell: "source {{KEYSTONE_SOURCE_PATH}} && cd {{HOME_DIR}}/cms_img && if openstack image list|grep -q {{CMS_IMAGE_CREATION_NAME}}; then echo '{{CMS_IMAGE_CREATION_NAME}} Image Already Exists'; else openstack image create {{CMS_IMAGE_CREATION_NAME}} --disk-format qcow2 --container-format=bare --file cms.qcow2; fi"
  remote_user: "{{USER}}"
  when: (CMS_IMAGE_STATUS.stdout_lines.0=="false")

- shell: "source {{KEYSTONE_SOURCE_PATH}} && cd {{HOME_DIR}}/vnfm_img && if openstack image list|grep -q {{VNFM_IMAGE_CREATION_NAME}}; then echo '{{VNFM_IMAGE_CREATION_NAME}} Image Already Exists'; else openstack image create {{VNFM_IMAGE_CREATION_NAME}} --disk-format qcow2 --container-format=bare --file vnfm.qcow2; fi"
  remote_user: "{{USER}}"
  when: (VNFM_IMAGE_STATUS.stdout_lines.0=="false")

- shell: "source {{KEYSTONE_SOURCE_PATH}} && cd {{HOME_DIR}} && openstack stack create -t {{CMS_ACTIVE_YAML_NAME}} -e CMS_Config_Drive_1.env {{CMS_ACTIVE_STACK_NAME}}"
  remote_user: "{{USER}}"
  when: (CMS_STANDALONE|lower == "true")

- shell: "source {{KEYSTONE_SOURCE_PATH}} && cd {{HOME_DIR}} && openstack stack create -t {{VNFM_ACTIVE1_YAML_NAME}} -e VNFM_IPv4_Standalone.env {{VNFM_ACTIVE1_STACK_NAME}}"
  remote_user: "{{USER}}"
  when: (VNFM_STANDALONE|lower == "true")

- shell: "ping -c 2 -W 10 {{VNFM1_IP}}"
  register: val
  retries: "240"
  delay: "5"
  until: not val.failed
  ignore_errors: yes
  delegate_to: localhost
  when: (VNFM_STANDALONE|lower == "true")

- set_fact:
    val:
      failed: false
  when: (VNFM_STANDALONE|lower == "false")

- fail:
    msg:
      - "##########################################################################"
      - "##########################################################################"
      - "###"
      - "###"
      - "###"
      - "###"
      - "###                {{VNFM1_IP}} IS NOT REACHABLE YET                      "
      - "###"
      - "###"
      - "###"
      - "###"
      - "##########################################################################"
      - "##########################################################################"
  when: val.failed

- pause: seconds=20
  when: (VNFM_STANDALONE|lower == "true")

- shell: "sshpass -p {{VNFM1_PASSWORD}} ssh -o StrictHostKeyChecking=no {{VNFM1_USER}}@{{VNFM1_IP}} \"ldconfig && /opt/Install/NewInstallation.sh\""
  remote_user: "{{USER}}"
  when: (VNFM_STANDALONE|lower == "true")
  delegate_to: localhost

- include_tasks: vnfm_ssl_install.yml VNFM_IP="{{VNFM1_IP}}" VNFM_USER="{{VNFM1_USER}}" VNFM_PASSWORD="{{VNFM1_PASSWORD}}" CONTROLLER_IP="{{inventory_hostname}}"
  when: (INSTALL_SSL_VNFM|lower == "true")

- shell: "source {{KEYSTONE_SOURCE_PATH}} && cd {{HOME_DIR}} && if openstack stack list|grep -q {{CMS_ACTIVE_STACK_NAME}}; then echo '{{CMS_ACTIVE_STACK_NAME}} Stack Already Exists'; else openstack stack create -t {{CMS_ACTIVE_YAML_NAME}} -e CMS_IPv4_Active.env {{CMS_ACTIVE_STACK_NAME}}; fi"
  remote_user: "{{USER}}"
  when: (CMS_STANDALONE|lower == "false")

- shell: "source {{KEYSTONE_SOURCE_PATH}} && cd {{HOME_DIR}} && if openstack stack list|grep -q {{VNFM_ACTIVE1_STACK_NAME}}; then echo '{{VNFM_ACTIVE1_STACK_NAME}} Stack Already Exists'; else openstack stack create -t {{VNFM_ACTIVE1_YAML_NAME}} -e VNFM_IPv4_Active1.env {{VNFM_ACTIVE1_STACK_NAME}}; fi"
  remote_user: "{{USER}}"
  when: (VNFM_STANDALONE|lower == "false")

- shell: "ping -c 2 -W 10 {{VNFM1_IP}}"
  register: val
  retries: "240"
  delay: "5"
  until: not val.failed
  ignore_errors: yes
  delegate_to: localhost
  when: (VNFM_STANDALONE|lower == "false")

- fail:
    msg:
      - "##########################################################################"
      - "##########################################################################"
      - "###"
      - "###"
      - "###"
      - "###"
      - "###                {{VNFM1_IP}} IS NOT REACHABLE YET                      "
      - "###"
      - "###"
      - "###"
      - "###"
      - "##########################################################################"
      - "##########################################################################"
  when: val.failed

- pause: seconds=20

- shell: "sshpass -p {{VNFM1_PASSWORD}} ssh -o StrictHostKeyChecking=no {{VNFM1_USER}}@{{VNFM1_IP}} \"ldconfig && /opt/Install/NewInstallation.sh\""
  remote_user: "{{USER}}"
  when: (VNFM_STANDALONE|lower == "false")
  delegate_to: localhost

- include_tasks: vnfm_ssl_install.yml VNFM_IP="{{VNFM1_IP}}" VNFM_USER="{{VNFM1_USER}}" VNFM_PASSWORD="{{VNFM1_PASSWORD}}" CONTROLLER_IP="{{inventory_hostname}}"
  when: (INSTALL_SSL_VNFM|lower == "true")

- shell: "source {{KEYSTONE_SOURCE_PATH}} && cd {{HOME_DIR}} && if openstack stack list|grep -q {{CMS_STANDBY_STACK_NAME}}; then echo '{{CMS_STANDBY_STACK_NAME}} Stack Already Exists'; else openstack stack create -t {{CMS_STANDBY_YAML_NAME}} -e CMS_IPv4_Standby.env {{CMS_STANDBY_STACK_NAME}}; fi"
  remote_user: "{{USER}}"
  when: (CMS_STANDALONE|lower == "false")

- shell: "source {{KEYSTONE_SOURCE_PATH}} && cd {{HOME_DIR}} && if openstack stack list|grep -q {{VNFM_ACTIVE2_STACK_NAME}}; then echo '{{VNFM_ACTIVE2_STACK_NAME}} Stack Already Exists'; else openstack stack create -t {{VNFM_ACTIVE2_YAML_NAME}} -e VNFM_IPv4_Active2.env {{VNFM_ACTIVE2_STACK_NAME}}; fi"
  remote_user: "{{USER}}"
  when: (VNFM_STANDALONE|lower == "false")

- shell: "ping -c 2 -W 10 {{VNFM2_IP}}"
  register: val
  retries: "240"
  delay: "5"
  until: not val.failed
  ignore_errors: yes
  delegate_to: localhost
  when: (VNFM_STANDALONE|lower == "false")

- fail:
    msg:
      - "##########################################################################"
      - "##########################################################################"
      - "###"
      - "###"
      - "###"
      - "###"
      - "###                {{VNFM2_IP}} IS NOT REACHABLE YET                      "
      - "###"
      - "###"
      - "###"
      - "###"
      - "##########################################################################"
      - "##########################################################################"
  when: val.failed

- pause: seconds=20

- shell: "sshpass -p {{VNFM2_PASSWORD}} ssh -o StrictHostKeyChecking=no {{VNFM2_USER}}@{{VNFM2_IP}} \"ldconfig && /opt/Install/NewInstallation.sh\""
  remote_user: "{{USER}}"
  when: (VNFM_STANDALONE|lower == "false")
  delegate_to: localhost

- include_tasks: vnfm_ssl_install.yml VNFM_IP="{{VNFM2_IP}}" VNFM_USER="{{VNFM2_USER}}" VNFM_PASSWORD="{{VNFM2_PASSWORD}}" CONTROLLER_IP="{{inventory_hostname}}"
  when: (INSTALL_SSL_VNFM|lower == "true")
