---

   - set_fact:
        CMS_STACK_NAME: "cms_2_{{CMS_IMAGE_LINK.split('/')[-1].split('-')[4]}}"

   - name: service cms stop
     shell: "service cms stop"
     remote_user: "{{CMS_STB_USER}}"
     delegate_to: "{{STBIP}}"
   
   - name: tar standby redun
     shell: "tar -zcvf redun.tar.gz redun/"
     args:
       chdir: /data/
     remote_user: "{{CMS_STB_USER}}"
     delegate_to: "{{STBIP}}"
 
   - fetch:
       src: "/data/redun.tar.gz"
       dest: /root/CMSbackup/
       flat: yes
       validate_checksum: yes
     remote_user: "{{CMS_STB_USER}}"
     delegate_to: "{{STBIP}}"

   - name: backup yang
     command: "scp -r yang/ root@10.10.220.84:/root/CMSbackup/standBy/"
     args:
       chdir: /data/redun
     remote_user: "{{CMS_STB_USER}}"
     delegate_to: "{{STBIP}}"

   - shell: "source {{KEYSTONE_SOURCE_PATH}} && cd {{HOME_DIR}} && openstack stack delete {{CMS_STANDBY_STACK_DELETE}} --yes"
     remote_user: "{{CONTROLLER_SYSUSER}}"
     delegate_to: "{{CONTROLLER}}"

   - pause: seconds=10 

   - shell: "source {{KEYSTONE_SOURCE_PATH}} && cd {{HOME_DIR}} && openstack stack create -t {{CMS_STANDBY_YAML_NAME}} -e {{CMS_STANDBY_ENV_NAME}} {{CMS_STACK_NAME}}"
     remote_user: "{{CONTROLLER_SYSUSER}}"
     delegate_to: "{{CONTROLLER}}"

   - pause: minutes=10

   - include_tasks: setup_pwdless_login.yml
     vars:
         SSHIP: "{{STBIP}}"
         ACIP: localhost
         SYSUSER: "{{CMS_IP_SYSUSER}}"
         SYSPASS: "{{CMS_IP_SYSPASS}}"

# CMS Standby status check for Standby
   - include_tasks: CMS_Status_Check.yml
     vars:
         CMSUSER: "{{CMS_STB_USER}}"
         CMSIP: "{{STBIP}}"
   - set_fact: new_status={{RESP.stdout}}
     when: RESP.stdout is defined

   - include_tasks: CMS_Status_Check.yml
     vars:
         CMSUSER: "{{CMS_STB_USER}}"
         CMSIP: "{{STBIP}}"
   - set_fact: new_status={{RESP.stdout}}
     retries: "{{ CMS_RETRIES }}"
     delay: "{{ CMS_DELAY }}"
     until: "{{new_status}}|lower == \"Standby\"|lower"

# CMS Standby status check for Configured
   - include_tasks: CMS_Status_Configured.yml
     vars:
         CMSUSER: "{{CMS_STB_USER}}"
         CMSIP: "{{STBIP}}"
   - set_fact: new_con_status={{RESP.stdout}}
     when: RESP.stdout is defined

   - include_tasks: CMS_Status_Configured.yml
     vars:
         CMSUSER: "{{CMS_STB_USER}}"
         CMSIP: "{{STBIP}}"
   - set_fact: new_con_status={{RESP.stdout}}
     retries: "{{ CMS_RETRIES }}"
     delay: "{{ CMS_DELAY }}"
     until: "{{new_con_status}}|lower == \"Configured\"|lower"
