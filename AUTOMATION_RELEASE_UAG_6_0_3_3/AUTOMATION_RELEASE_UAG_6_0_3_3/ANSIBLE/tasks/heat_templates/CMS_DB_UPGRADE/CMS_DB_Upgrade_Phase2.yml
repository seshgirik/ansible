---
    - set_fact:
        CMS_STACK_NAME: "cms_1_{{CMS_IMAGE_LINK.split('/')[-1].split('-')[4]}}"

    - name: service cms stop
      shell: "service cms stop"
      remote_user: "{{CMS_ACT_USER}}"
      delegate_to: "{{ACTIP}}"

    - include_tasks: ProcessMonitor_Restart.yml
      vars:
          CMSUSER: "{{CMS_ACT_USER}}"
          CMSIP: "{{ACTIP}}"

    - pause: minutes=4

    - include_tasks: CMS_Status_Check.yml
      vars:
          CMSUSER: "{{CMS_STB_USER}}"
          CMSIP: "{{STBIP}}"
    - set_fact: STATUS_RESP_SYNCED={{RESP.stdout}}
      when: RESP.stdout is defined

    - debug:
         msg="{{STATUS_RESP_SYNCED}}"

    - shell: "source {{KEYSTONE_SOURCE_PATH}} && cd {{HOME_DIR}} && openstack stack delete {{CMS_ACTIVE_STACK_DELETE}} --yes"
      remote_user: "{{CONTROLLER_SYSUSER}}"
      delegate_to: "{{CONTROLLER}}"
      when: "{{STATUS_RESP_SYNCED}}|lower == \"Active\"|lower"

    - pause: seconds=10

    - shell: "source {{KEYSTONE_SOURCE_PATH}} && cd {{HOME_DIR}} && openstack stack create -t {{CMS_ACTIVE_YAML_NAME}} -e {{CMS_ACTIVE_ENV_NAME}} {{CMS_STACK_NAME}}"
      remote_user: "{{CONTROLLER_SYSUSER}}"
      delegate_to: "{{CONTROLLER}}"

    - pause: minutes=10

    - include_tasks: setup_pwdless_login.yml 
      vars:
          SSHIP: "{{ACTIP}}"
          ACIP: localhost
          SYSUSER: "{{CMS_IP_SYSUSER}}"
          SYSPASS: "{{CMS_IP_SYSPASS}}"

# CMS Standby status check for Standby
    - include_tasks: CMS_Status_Check.yml
      vars:
          CMSUSER: "{{CMS_ACT_USER}}"
          CMSIP: "{{ACTIP}}"
    - set_fact: new_status={{RESP.stdout}}
      when: RESP.stdout is defined

    - include_tasks: CMS_Status_Check.yml
      vars:
          CMSUSER: "{{CMS_ACT_USER}}"
          CMSIP: "{{ACTIP}}"
    - set_fact: new_status={{RESP.stdout}} 
      retries: "{{ CMS_RETRIES }}"
      delay: "{{ CMS_DELAY }}"
      until: "{{new_status}}|lower == \"Standby\"|lower"

# CMS Standby status check for Configured
    - include_tasks: CMS_Status_Configured.yml
      vars:
          CMSUSER: "{{CMS_ACT_USER}}"
          CMSIP: "{{ACTIP}}"
    - set_fact: new_con_status={{RESP.stdout}}
      when: RESP.stdout is defined

    - include_tasks: CMS_Status_Configured.yml
      vars:
          CMSUSER: "{{CMS_ACT_USER}}"
          CMSIP: "{{ACTIP}}"
    - set_fact: new_con_status={{RESP.stdout}}
      retries: "{{ CMS_RETRIES }}"
      delay: "{{ CMS_DELAY }}"
      until: "{{new_con_status}}|lower == \"Configured\"|lower"
