- name: "Getting SSH KEY"
  shell: "echo $(cat ~/.ssh/id_rsa.pub)"
  register: id_rsa_pub
  delegate_to: localhost

- set_fact:
    SSH_KEY: "{{id_rsa_pub.stdout}}"

- fail:
    msg: "SSH public key not found. Please generate the public key using ssh-keygen.{{SSH_KEY}}"
  when: SSH_KEY==""

# - name: Setting up passwordless login
#   command: "sshpass -p {{IDRAC_DFLT_PW}} ssh-copy-id -o StrictHostKeyChecking=no {{IDRAC_USER}}@{{inventory_hostname}}"
#   register: lg_res
#   delegate_to: localhost
#   ignore_errors: yes
#
# - command: "sshpass -p {{IDRAC_PW}} ssh-copy-id -o StrictHostKeyChecking=no {{IDRAC_USER}}@{{inventory_hostname}}"
#   register: lg1_res
#   when: lg_res.failed
#   delegate_to: localhost
#   ignore_errors: yes

- name: Setting up passwordless login
  command: "{{SSH_CMD}} racadm sshpkauth -i 2 -k 1 -t \"{{SSH_KEY}}\""
  register: lg_res
  delegate_to: localhost
  ignore_errors: yes

- set_fact:
    SSH_CMD: "sshpass -p {{IDRAC_PW}} ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=dev/null {{IDRAC_USER}}@{{inventory_hostname}}"
  when: lg_res.failed

- command: "{{SSH_CMD}} racadm sshpkauth -i 2 -k 1 -t \"{{SSH_KEY}}\""
  register: lg1_res
  when: lg_res.failed
  delegate_to: localhost
  ignore_errors: yes

- set_fact:
    fail_value: false

- set_fact:
    fail_value: "{{lg1_res.failed}}"
  when: lg1_res.failed is defined

- fail:
    msg: "Failed to authenticate, please use the right IDRAC_DFLT_PW/IDRAC_PW password in the config file"
  when: fail_value
