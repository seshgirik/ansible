======================================================
README FOR RELEASE VERSION 1.0.8
======================================================


CONTENTS OF THIS FILE
---------------------   
 * Openstack Deployment
 * CMS/VNFM Instantiation
 * CRDL
 * VNF Deployment
 * Maintenance


OPENSTACK DEPLOYMENT
--------------------

This involves Raid Configuration, installing Operating System (WindRiver/RHEL), installing license/patches,
controller configuration, adding compute nodes, creating tenants and adding flavors.

 Prerequisites:
 
  * Dell Rack Mount Server with iDRAC access
  * Operating System Image
 
 Execution Steps:
 
  * Update all relevant fields in following sheets of excel workbook "SB_AUTOMATION.xlsm" found in the package.

     a. Raid Config
     b. OS Config
     c. Controller Config
     d. Network Config
     e. Host Config
     f. Flavor
     g. IDRAC_Inventory

    NOTE: In Raid Config, the order in which keys are arranged in excel sheet is important. 
          Raid Configuration is done exactly in the same order as given in excel sheet and Hard Disks
          obtained from the output of "racadm raid get pdisks" are going to be used sequentially for Raid Configuration.

  * Generate config files by clicking the button found in summary sheet OR use keyboard shortcut - Ctrl + Shift + X.
  * After generating config files, copy the package to Ubuntu machine and execute "dell_install_os.sh"
    found in the package, logs will be saved in dell_install_os.log in LOGS directory found in the package.


CMS/VNFM INSTANTIATION
----------------------

Here, we create CMS and VNFM stacks using environment files generated by Excel.

 Prerequisites:

  * YAML templates for CMS/VNFM

 Execution Steps:

  * Following sheets of excel workbook "SB_AUTOMATION.xlsm" should be updated.
  
     a. HeatTemplate_Conf - Takes input of CMS/VNFM compressed qcow2 image links, credentials for openstack, CMS & VNFM among others.
     b. Instantiating CMS - Takes CMS environment data as input to generate CMS environment file.
     c. Instantiating VNFM - Takes VNFM environment data as input to generate VNFM environment file.
     d. CONTROLLER_Inventory - IP Addresses of controller ie. openstack hosts.
  
  * Generate config files by clicking the button found in summary sheet OR use keyboard shortcut - Ctrl + Shift + X.
  * Copy all YAML templates of CMS/VNFM to ANSIBLE\files\heat_templates\config_files\ directory.
  * After generating config files, copy the package to Ubuntu machine and execute "heat_template.sh"
    found in the package, logs will be saved in heat_template.log in LOGS directory found in the package.


CRDL
----

CRDL Admin and DB nodes can be spawned by using environment files generated by Excel.

 Prerequisites:

  * YAML templates for CRDL Volume, CRDL Admin and CRDL Cluster nodes

 Execution Steps:

  * Following sheets of excel workbook "SB_AUTOMATION.xlsm" should be updated.

    a. HeatTemplate_Conf - Takes input of CRDL admin/db compressed qcow2 image links, credentials for openstack and CRDL nodes.
    b. CRDL - Takes CRDL environment data as input to generate environment files for Volumes & Admin/Cluster nodes.
    c. CONTROLLER_Inventory - IP Addresses of controller ie. openstack hosts.

  * Generate config files by clicking the button found in summary sheet OR use keyboard shortcut - Ctrl + Shift + X.
  * Copy all YAML templates of CRDL to ANSIBLE\files\heat_templates\crdl directory.
  * After generating config files, copy the package to Ubuntu machine and execute "crdl.sh"
    found in the package, logs will be saved in crdl.log in LOGS directory found in the package.

VNF DEPLOYMENT
--------------

This includes all CMS operations performed in order to deploy VNFs such as
 a. VNF-M Add
 b. Provider Add
 c. Tenant Add
 d. Image Save/Onboard
 e. Descriptors Save/Onboard
 f. Config Model Add
 g. Config Data Add
 h. Offline Config
 i. NSD Deploy

 Prerequisites:

  * Image links for all VNFs, make sure it's accessible from openstack host.
  * Yang files and Config files for corresponding VDUs.

 Execution Steps:
  
  a. Steps to deploy adding new VNF-M, Provider and Tenant

     * Update sheets VLD, VNFD, NSD, LVND, LCMD in "SB_AUTOMATION.xlsm" workbook.
     * Update VNFM_config sheet, with CMS (including MySQL)/VNFM creadentials, NSD deployment details like NSD version, NSD name/ID,
       Image Info, yang file names with corresponding VDU IDs, config file names with corresponding VDU IDs etc. according to the desciptors.
     * Generate config files by clicking the button found in summary sheet OR use keyboard shortcut - Ctrl + Shift + X.
     * Generate descriptors by clicking the button found in summary sheet OR use keyboard shortcut - Ctrl + Shift + D.
     * Copy all yang files to ANSIBLE\files\vnf_instantiation\Deployment_Folder\VNFM_DEPLOYABLE\Yang\ directory in the package.
     * Copy all config files to ANSIBLE\files\vnf_instantiation\Deployment_Folder\VNFM_DEPLOYABLE\Config\ directory in the package.
     * After generating config files, copy the package to Ubuntu machine and execute "vnf_instantiate.sh"
       found in the package, logs will be saved in vnf_instantiate.log in LOGS directory found in the package.


  b. Steps to deploy using existing VNF-M, Provider and Tenant

     * Update sheets VLD, VNFD, NSD, LVND, LCMD in "SB_AUTOMATION.xlsm" workbook.
     * Update VNFM_config sheet, with CMS (including MySQL)/VNFM creadentials, NSD deployment details like NSD version, NSD name/ID,
       Image Info, yang file names with corresponding VDU IDs, config file names with corresponding VDU IDs etc. according to the desciptors.
     * Generate config files by clicking the button found in summary sheet OR use keyboard shortcut - Ctrl + Shift + X.
     * Generate descriptors by clicking the button found in summary sheet OR use keyboard shortcut - Ctrl + Shift + D.
     * Copy all yang files to ANSIBLE\files\vnf_instantiation\Deployment_Folder\VNFM_DEPLOYABLE\Yang\ directory in the package.
     * Copy all config files to ANSIBLE\files\vnf_instantiation\Deployment_Folder\VNFM_DEPLOYABLE\Config\ directory in the package.
     * After generating config files, copy the package to Ubuntu machine and execute "deploy_new_nsd.sh"
       found in the package, logs will be saved in deploy_new_nsd.log in LOGS directory found in the package.

  c. Steps to deploy with existing Descriptors (Not using Descriptors generated by excel)

     * Copy all descriptors to ANSIBLE\files\vnf_instantiation\Deployment_Folder\VNFM_DEPLOYABLE\ directory in the package.
     * Update VNFM_config sheet, with CMS (including MySQL)/VNFM creadentials, NSD deployment details like NSD version, NSD name/ID,
       Image Info, yang file names with corresponding VDU IDs, config file names with corresponding VDU IDs etc. according to the desciptors.
     * Generate config files by clicking the button found in summary sheet OR use keyboard shortcut - Ctrl + Shift + X.
     * Copy all yang files to ANSIBLE\files\vnf_instantiation\Deployment_Folder\VNFM_DEPLOYABLE\Yang\ directory in the package.
     * Copy all config files to ANSIBLE\files\vnf_instantiation\Deployment_Folder\VNFM_DEPLOYABLE\Config\ directory in the package.
     * After generating config files, copy the package to Ubuntu machine
     * Execute "vnf_instantiate.sh"/"deploy_new_nsd.sh" found in the package, 
       logs will be saved in vnf_instantiate.log/deploy_new_nsd.log in LOGS directory accordingly.


MAINTENANCE
-----------

 a. ONLINE CONFIG:
    
     * Update CMS IP, CMS URL, CMS System Credentials and MySQL Credentials in 
       ANSIBLE\vars\vnf_instantiation\online_config.yml file.
     * Execute online_config.sh in the package, in Ubuntu.
     * When prompt occurs, enter the ID to download that particular snapshot.
     * The snapshot/config file will be downloaded to "ANSIBLE/files/vnf_instantiation/CONFIG_DOWNLOADS/" directory.
     * Make changes to config and hit "Enter" key in the screen where online_config.sh is executed.
     * Prompt asking for new config name occurs, type a name for config and hit "Enter" key once again. This completes online config.

 b. BACKUP AND RESTORE:
    
     * To perform Backup/Restore operation, execute "backup_and_restore.sh" script found in package.
       All necessary parameters for Backup/Restore operation will be taken interactively through the terminal.

 c. ROLLING UPGRADE:
     
     * Fill out VNFM_Config sheet in "SB_AUTOMATION.xlsm" workbook with all configuration details pertaining to rolling upgrade.
     * Generate config files by clicking the button found in summary sheet OR use keyboard shortcut - Ctrl + Shift + X.
     * Execute "rolling_upgrade.sh" script in  folder, this executes ansible scripts in order to activate
       FOA with new descriptors and images, logs are saved in same directory in file "vnfd_rolling_upgrade.log".
     * After testing activated FOA, Rolling Upgrade can be completed by executing "rolling_upgrade_production_upgrade.sh"
       script in "ROLLING_UPGRADE_SHELL_SCRIPTS" folder which performs production upgrade, 
       logs are saved in same directory in file "vnfd_rolling_upgrade.log".
     
     NOTE:
      * We can deactivate FOA by executing "rolling_upgrade_deactivate_foa.sh" found in same directory.
      * We can abort Rolling upgrade by executing "rolling_upgrade_abort.sh" found in same directory.

 d. VNFM UPGRADE:
    
    * Update Instantiating VNFM and HeatTemplate_Conf sheets in the "SB_AUTOMATION.xlsm"
    * Execute the vnfm_upgrade.sh found in the package.
    * Maintenance mode will be enabled and VnfmDBExport.sh script will be invoked.
    * The data backup is downloaded to local setup where the vnfm_upgrade.sh script is running.
    * Old VNFM stack(s) will be deleted and new VNFM stack(s) will be spawned.
    * Data backup will be uploaded to the new VNFM and VnfmDBImport.sh will be invoked, this completes VNFM upgrade.


 e. CMS UPGRADE:
    
    * Update Instantiating CMS and HeatTemplate_Conf sheets in the "SB_AUTOMATION.xlsm"
    * Execute the cms_upgrade.sh found in the package.

 f. VNFM BACKUP
    
    * Update HeatTemplate_Conf sheets in the "SB_AUTOMATION.xlsm"
    * Execute the vnfm_backup.sh found in the package.

 g. VNFM RESTORE
    
    * Update Instantiating VNFM and HeatTemplate_Conf sheets in the "SB_AUTOMATION.xlsm"
    * Execute the vnfm_restore.sh found in the package.